<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities build="b222" majorVersion="8" minorVersion="5" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1053" universal="">
    <Things>
        <Thing description="" documentationContent="" effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup="" identifier="" lastModifiedDate="2020-04-08T11:05:09.523Z" name="BayerUtilities" projectName="BayerIoT" published="false" tags="Applications:Bayer" thingTemplate="GenericThing" valueStream="">
            <avatar/>
            <DesignTimePermissions>
                <Create/>
                <Read/>
                <Update/>
                <Delete/>
                <Metadata/>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions resourceName="GetCurrentShiftTime">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="GetRowNumOfCurrentShift">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="SleepHack">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="GetPastDayStartEndTime">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="CheckUserInRole">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="*">
                    <PropertyRead>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </PropertyRead>
                    <PropertyWrite/>
                    <ServiceInvoke/>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="GetCurrentShift">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
                        <Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="LoadCSVGeneric">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="GetProductDescriptionTranslated">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="GetTranslation">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal isPermitted="true" name="Bayer:PerformanceDashboard" type="OrganizationalUnit"/>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions/>
            <ConfigurationTables/>
            <ThingShape>
                <PropertyDefinitions/>
                <ServiceDefinitions>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CheckUserInRole">
                        <ResultType baseType="BOOLEAN" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.isRequired="true" baseType="GROUPNAME" description="" name="role" ordinal="2"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetCurrentShift">
                        <ResultType aspect.dataShape="BayerShiftScheduleDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.isRequired="true" aspect.thingTemplate="BayerProductionLine" baseType="THINGNAME" description="" name="lineName" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetCurrentShiftTime">
                        <ResultType aspect.dataShape="BayerShiftTimeDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions/>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetLineExtendedStatus">
                        <ResultType aspect.dataShape="EntityList" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.thingTemplate="BayerProductionLine" baseType="THINGNAME" description="" name="lineName" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetLineName">
                        <ResultType baseType="STRING" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition baseType="STRING" description="" name="line" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetPastDayStartEndTime">
                        <ResultType aspect.dataShape="BayerShiftTimeDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions/>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetProductDescriptionTranslated">
                        <ResultType baseType="STRING" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="productDescription" ordinal="2"/>
                            <FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="productId" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetRowNumOfCurrentShift">
                        <ResultType aspect.dataShape="BayerProductionPlanDataShape" baseType="INTEGER" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.dataShape="BayerShiftSchedulesDataShape" aspect.isRequired="true" baseType="INFOTABLE" description="" name="shiftSchedules" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="LoadCSVGeneric">
                        <ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.defaultValue=";" aspect.isRequired="true" baseType="STRING" description="" name="delimiter" ordinal="3"/>
                            <FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="filePath" ordinal="1"/>
                            <FieldDefinition aspect.isRequired="true" aspect.thingTemplate="FileRepository" baseType="THINGNAME" description="" name="repository" ordinal="2"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="SleepHack">
                        <ResultType baseType="NOTHING" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition aspect.defaultValue="100" aspect.isRequired="true" aspect.units="ms" baseType="INTEGER" description="" name="time" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions/>
                <ServiceMappings/>
                <ServiceImplementations>
                    <ServiceImplementation description="" handlerName="Script" name="CheckUserInRole">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = false;
                                        
                                        try {
                                            // result: INFOTABLE dataShape: "EntityList"
                                        	var groups =  Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        
                                            var tableLength = groups.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = groups.rows[x];
                                        
                                                if (row.name == role) {
                                                    result = true;
                                                    break;
                                                }
                                            }
                                        }
                                        catch (ex) {
                                            logger.error(me.name + "CheckUserInRole: " + ex);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetCurrentShift">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "BayerShiftTimeDataShape"
                                        var shiftTime = me.GetCurrentShiftTime();
                                        
                                        // result: INFOTABLE dataShape: "BayerShiftScheduleDataShape"
                                        var result =  Things["BayerDBDataProvider"].GetSingleShiftByTime({
                                        	shiftTime: shiftTime.startTime /* DATETIME */,
                                        	productionLine: lineName /* THINGNAME */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetCurrentShiftTime">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "BayerShiftTimeDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerShiftTimeDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // BayerShiftTimeDataShape entry object
                                        var newEntry = new Object();
                                        
                                        var startTime = new Date();
                                        var endTime = new Date();
                                        
                                        startTime.setMinutes(0);
                                        startTime.setSeconds(0);
                                        startTime.setMilliseconds(0);
                                        
                                        var hour = startTime.getHours();
                                        if (hour > 6 && hour < 14) {
                                            startTime.setHours(6);
                                        }
                                        else if (hour > 14 && hour < 22) {
                                            startTime.setHours(14);
                                        }
                                        else if (hour > 22 || hour < 6) {
                                            if (hour < 6) {
                                                startTime = dateAddDays(startTime, -1);
                                            }
                                            startTime.setHours(22);
                                        }
                                        
                                        newEntry.startTime = startTime; // DATETIME
                                        
                                        endTime.setMinutes(0);
                                        endTime.setSeconds(0);
                                        endTime.setMilliseconds(0);
                                        
                                        var hour = endTime.getHours();
                                        if (hour >= 6 && hour < 14) {
                                            endTime.setHours(14);
                                        }
                                        else if (hour >= 14 && hour < 22) {
                                            endTime.setHours(22);
                                        }
                                        else if (hour >= 22 || hour < 6) {
                                            if (hour >= 22) {
                                                endTime = dateAddDays(endTime, 1);
                                            }
                                            endTime.setHours(6);
                                        }
                                        
                                        newEntry.endTime = endTime; // DATETIME
                                        
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetLineExtendedStatus">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var line = Things[lineName];
                                        var product = line.GetCurrentProduct();
                                        var isProductionRunning = line.productionRunning;
                                        var productId = product.productId;
                                        var productDescription = product.productDescription;
                                        var lineConfiguration = line.GetLineConfiguration();
                                        var delayMicrostopTimeMax = lineConfiguration.rows[0].delayMicrostopTimeMax;
                                        var delayMicrostopTimeMaxMs = delayMicrostopTimeMax * 60 * 1000;
                                        var params = {
                                            infoTableName: "InfoTable",
                                            dataShapeName: "EntityList"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(EntityList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var newRow = new Object();
                                        
                                        if (isProductionRunning) {
                                            if (productId == "Cambio") {
                                                newRow = {
                                                    name: productId,
                                                    description: productDescription
                                                };
                                            } else {
                                                newRow = {
                                                    name: "InProduction",
                                                    description: productDescription
                                                };
                                            }
                                        } else {
                                            if (productId == "standby") {
                                                newRow = {
                                                    name: "Cambio",
                                                    description: productDescription
                                                };
                                            } else {
                                                newRow = {
                                                    name: "Stopped",
                                                    description: "[[Bayer.State.NotRunning]]"
                                                };
                                                if (isCurrentBreakdown()) {
                                                    newRow = {
                                                        name: "Breakdown",
                                                        description: "[[Bayer.State.breakdown]]"
                                                    };
                                                }
                                            }
                                        }
                                        result.AddRow(newRow);
                                        
                                        function isCurrentBreakdown() {
                                            let shifts = line.GetShiftsFromNow({
                                                nrOfPrevShifts: 0,
                                                nrOfNextShifts: 0,
                                                interval: 30
                                            });
                                            if (!shifts || !shifts.rows.length) {
                                                return false;
                                            }
                                            let shiftStartTime = shifts.rows[0].timestamp;
                                            let shiftId = line.currentShiftId;
                                            let events = Things["BayerDBDataProvider"].GetShiftEvents({
                                                shiftScheduleId: shiftId /* INTEGER */
                                            });
                                            let breakdownEvent;
                                            let breakdownDuration;
                                            let lastEventEndTime = new Date(shiftStartTime);
                                            let totalTime = 0;
                                            if (events.getRowCount() > 0) {
                                                let tableLength = events.rows.length;
                                                for (let x = 0; x < tableLength; x++) {            
                                                    let event = events.rows[x];
                                                    // Take into account (total time in this shift) only breakdowns
                                                    if(event.category != "breakdown" && event.category != "microstop") {
                                                    	continue;
                                                    }
                                                    let duration = event.durationMs;
                                                    totalTime += duration;
                                                } // for each entry
                                                lastEventEndTime = events.rows[tableLength - 1].endTime;
                                            } // got events?
                                        
                                            if (!isProductionRunning) {
                                                // check the last event date difference (it'll be 'running' record, so we know when it stopped running!)
                                                breakdownDuration = dateDifference(Date.now(), lastEventEndTime);
                                                totalTime += breakdownDuration;        
                                                //logger.warn(line.name+" >> totalTime='"+totalTime+"' breakdownDuration='"+breakdownDuration+"' lastEventTime='"+lastEventEndTime.toISOString()+"';");
                                                //logger.warn(line.name+" >> delayMicrostopTimeMaxMs='"+delayMicrostopTimeMaxMs+"';");
                                                lastEventEndTime = dateAddMilliseconds(lastEventEndTime, breakdownDuration);
                                                if (breakdownDuration >= delayMicrostopTimeMaxMs /*|| totalTime >= delayMicrostopTimeMaxMs*/) {
                                                    // Should check this length is more than configured microstop in minutes?
                                                    // Or maybe check the total breakdowns duration from current events on the line (events rows)
                                                    return true;
                                                }
                                            }
                                            return false;
                                        } // isCurrentBreakdown()
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetLineName">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = Things[line].displayName;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetPastDayStartEndTime">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var currentTime = new Date();
                                        
                                        var startTime = new Date(currentTime);
                                        startTime.setHours(6);
                                        startTime.setMinutes(0);
                                        startTime.setSeconds(0);
                                        startTime.setMilliseconds(0);
                                        
                                        var endTime = new Date(startTime);
                                        
                                        if (currentTime.getHours() < 6) {
                                        	startTime = dateAddDays(startTime, -2);
                                            endTime = dateAddDays(endTime, -2);
                                        }
                                        else {
                                            startTime = dateAddDays(startTime, -1);
                                        }
                                        
                                        endTime = dateAddMilliseconds(endTime, -1);
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "BayerShiftTimeDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerShiftTimeDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // BayerShiftTimeDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.startTime = startTime; // DATETIME
                                        //newEntry.startTime = dateAddDays(newEntry.startTime, -4);
                                        newEntry.endTime = endTime; // DATETIME
                                        
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetProductDescriptionTranslated">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = productDescription;
                                        
                                        switch (productId) {
                                            case "Cambio":
                                                result =  Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({
                                                    token: "Bayer.Cambio" /* STRING */
                                                });
                                                break;
                                            case "standby":
                                                result =  Resources["RuntimeLocalizationFunctions"].GetEffectiveToken({
                                                    token: "Bayer.Standby" /* STRING */
                                                });
                                                break;
                                            default:
                                                break;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetRowNumOfCurrentShift">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "BayerShiftTimeDataShape"
                                        var shiftTime = me.GetCurrentShiftTime();
                                        
                                        var tableLength = shiftSchedules.rows.length;
                                        
                                        var result = -1;
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = shiftSchedules.rows[x];
                                        	
                                            if (row.timestamp.getTime() == shiftTime.startTime.getTime()) {
                                                result = x;
                                                break;
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="LoadCSVGeneric">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = { dataShape: { fieldDefinitions : {} }, rows: [] };
                                        
                                        var params = {
                                        	path: filePath /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var content = Things[repository].LoadText(params);
                                        
                                        var lines = content.match(/[^\r\n]+/g);
                                        
                                        var fields = lines[0].split(delimiter);
                                        
                                        for (var i = 0; i < fields.length; i++) {
                                            result.dataShape.fieldDefinitions[fields[i]] = { name: fields[i], baseType: 'STRING', ordinal: i+1 };
                                        }
                                        
                                        var params = {
                                        	json: result /* JSON */
                                        };
                                        
                                        // result: INFOTABLE
                                        result = Resources["InfoTableFunctions"].FromJSON(params);
                                        
                                        for (var x = 1; x < lines.length; x++) {
                                            var values = lines[x].split(delimiter);
                                            
                                            var newEntry = new Object();
                                            for (var i = 0; i < fields.length; i++) {
                                                newEntry[fields[i]] = values[i];
                                            }
                                            
                                            result.AddRow(newEntry);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="SleepHack">
                        <ConfigurationTables>
                            <ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        pause(time);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions/>
            </ThingShape>
            <PropertyBindings/>
            <RemotePropertyBindings/>
            <RemoteServiceBindings/>
            <RemoteEventBindings/>
            <AlertConfigurations/>
            <ImplementedShapes/>
            <ThingProperties/>
        </Thing>
    </Things>
</Entities>
