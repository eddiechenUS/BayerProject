<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities build="b222" majorVersion="8" minorVersion="5" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1053" universal="">
<ThingShapes>
<ThingShape className="" description="" documentationContent="" homeMashup="" lastModifiedDate="2020-03-31T09:11:59.948Z" name="BayerProductionManagement" projectName="BayerIoT" tags="Applications:Bayer">
<PropertyDefinitions>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeThreshold="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="0.0" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="NUMBER" category="" description="" isLocalOnly="false" name="counter" ordinal="2"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="INTEGER" category="" description="" isLocalOnly="false" name="currentProductKey" ordinal="4"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeThreshold="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="0.0" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="NUMBER" category="" description="" isLocalOnly="false" name="kepwareCounter" ordinal="1"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="DATETIME" category="" description="" isLocalOnly="false" name="lastProductionPlanUpdate" ordinal="7"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeThreshold="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="0.0" aspect.isLogged="false" aspect.isPersistent="true" aspect.isReadOnly="false" baseType="NUMBER" category="" description="" isLocalOnly="false" name="previousProductCounter" ordinal="3"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" baseType="STRING" category="" description="" isLocalOnly="false" name="productionlinestatus" ordinal="8"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="NUMBER" category="" description="" isLocalOnly="false" name="productionsensorvalue" ordinal="9"/>
<PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="false" aspect.isLogged="false" aspect.isPersistent="false" aspect.isReadOnly="false" baseType="BOOLEAN" category="" description="" isLocalOnly="false" name="updateProductLock" ordinal="6"/>
</PropertyDefinitions>
<ServiceDefinitions>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="CompleteCurrentProduct">
<ResultType baseType="NOTHING" description="" name="result" ordinal="0"/>
<ParameterDefinitions/>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetChangeoverDetailsTrendForLine">
<ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.isRequired="true" baseType="DATETIME" description="" name="dateTime" ordinal="1"/>
<FieldDefinition aspect.defaultValue="0" aspect.isRequired="true" aspect.maximumValue="0" aspect.minimumValue="-5" aspect.units="week" baseType="INTEGER" description="" name="week" ordinal="2"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetChangeoverTime">
<ResultType aspect.dataShape="BayerProgressDisplayDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions/>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetChangeoverTimes">
<ResultType aspect.dataShape="BayerChangeoverTimesDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.isRequired="true" baseType="DATETIME" description="" name="endTime" ordinal="2"/>
<FieldDefinition aspect.isRequired="true" baseType="DATETIME" description="" name="startTime" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetChangeoverTrendByDate">
<ResultType aspect.dataShape="BayerChangeoverTrendDetailsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition baseType="DATETIME" description="" name="endDate" ordinal="2"/>
<FieldDefinition baseType="DATETIME" description="" name="startDate" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetChangeoverTrendForLine">
<ResultType baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.isRequired="true" baseType="DATETIME" description="" name="dateTime" ordinal="1"/>
<FieldDefinition aspect.defaultValue="0" aspect.maximumValue="0" aspect.minimumValue="-5" aspect.units="week" baseType="INTEGER" description="" name="week" ordinal="3"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetCurrentProduct">
<ResultType aspect.dataShape="BayerProductionPlanDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions/>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetMaintenanceTicketsByDate">
<ResultType aspect.dataShape="BayerMaintenanceTicketsDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition baseType="DATETIME" description="" name="endDate" ordinal="2"/>
<FieldDefinition baseType="DATETIME" description="" name="startDate" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetProductionPlan">
<ResultType aspect.dataShape="BayerProductionPlanDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions/>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="LoadCSVv2">
<ResultType aspect.dataShape="BayerProductionPlanDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.isRequired="true" baseType="STRING" description="" name="path" ordinal="1"/>
<FieldDefinition aspect.isRequired="true" aspect.thingTemplate="FileRepository" baseType="THINGNAME" description="" name="repository" ordinal="2"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="true" isLocalOnly="false" isOpen="false" isPrivate="false" name="LoadProductionPlan">
<ResultType aspect.dataShape="BayerProductionPlanDataShape" baseType="INFOTABLE" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.isRequired="true" baseType="INFOTABLE" description="" name="data" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UpdateCounter">
<ResultType baseType="NOTHING" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.dataShape="DataChangeEvent" aspect.isRequired="true" baseType="INFOTABLE" description="" name="eventData" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
<ServiceDefinition aspect.isAsync="true" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="UpdateProduct">
<ResultType baseType="NOTHING" description="" name="result" ordinal="0"/>
<ParameterDefinitions>
<FieldDefinition aspect.dataShape="ScheduledEvent" aspect.isRequired="true" baseType="INFOTABLE" description="" name="eventData" ordinal="1"/>
</ParameterDefinitions>
</ServiceDefinition>
</ServiceDefinitions>
<EventDefinitions/>
<ServiceMappings/>
<ServiceImplementations>
<ServiceImplementation description="" handlerName="Script" name="CompleteCurrentProduct">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[// complete current in progress product

try {
    me.updateProductLock = true; // to block the periodic "UpdateProduct" task
    
    //throw test;
    
    // result: INFOTABLE dataShape: "BayerProductionPlanDataShape"
    var current = me.GetCurrentProduct();

    if (current && current.rows.length > 0) {
        current.producedQuantity = me.counter;
        me.previousProductCounter += me.counter;
        me.previousCycleCounter -= me.counter;
        me.counter = 0;

        current.status = "COMPLETED";
        current.endTime = new Date();

        var difference = dateDifference(current.endTime, current.startTime);

        current.workedHours = difference / 1000.0 / 60.0 / 60.0;
        current.remainingHours = current.targetHours - current.workedHours;
        if (current.remainingHours < 0) {
            current.remainingHours = 0;
        }

         Things["BayerDBDataProvider"].UpdateProductionPlanOnCompletion({
            data: current /* INFOTABLE */
        });
    }

    // start first pending product
    
    // result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
    var pending =  Things["BayerDBDataProvider"].GetProductionPlanItemByStatus({
        productionLine: me.name /* THINGNAME */,
        status: 'PENDING' /* STRING */
    });

    me.currentProductKey = pending.id;

    pending.startTime = new Date();
    pending.status = "INPROGRESS";

    Things["BayerDBDataProvider"].UpdateProductionPlanOnStart({
        data: pending /* INFOTABLE */
    });
}
catch (ex) {
    logger.error(me.name + ".CompleteCurrentProduct " + ex);
    throw ex;
}
finally {
    me.updateProductLock = false;
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetChangeoverDetailsTrendForLine">
<ConfigurationTables>
<ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var result = Things["BayerDBDataProvider"].GetChangeoverDetailsTrendForLine({
	productionLine: me.name,
    dateTime: dateTime,
    week: week,
});]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetChangeoverTime">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable")
// dataShapeName:STRING):INFOTABLE(BayerProgressDisplayDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
    dataShapeName: "BayerProgressDisplayDataShape"
});
// BayerProgressDisplayDataShape entry object
var newEntry = {};
newEntry.min = 0; // NUMBER

// result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
var currentProduct = me.GetCurrentProduct();
if (currentProduct && currentProduct.getRowCount() > 0) {
    if (currentProduct.productId == "Cambio") {
        var targetMinutes = currentProduct.targetHours * 60;

        // dateDifference(date1:DATETIME,date2:DATETIME):NUMBER
        var difference = dateDifference(new Date(), currentProduct.startTime) / 1000 / 60;

        newEntry.max = targetMinutes; // NUMBER
        newEntry.value = difference; // NUMBER
        
        // #FIXME
        //newEntry.value = targetMinutes - 10;

        // Bayer wants to be able to exceed the target by 10%
        newEntry.green = difference < targetMinutes * 1.1;
        newEntry.red = !newEntry.green;
    } else {
        newEntry.max = 60; // NUMBER
        newEntry.value = 0; // NUMBER
        newEntry.green = true;
        newEntry.red = false;
    }
} else {
    newEntry.red = false; // BOOLEAN
    newEntry.green = false; // BOOLEAN
    newEntry.max = 60; // NUMBER
    newEntry.value = 0; // NUMBER
}
result.AddRow(newEntry);
]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetChangeoverTimes">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[// changeovers finished after startTime and started before endTime
// plus
// changeover in progress

// result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
var filtered =  Things["BayerDBDataProvider"].GetChangeovers({
	productionLine: me.name /* THINGNAME */,
	startTime: startTime /* DATETIME */,
	endTime: endTime /* DATETIME */
});

// BUILDING RESULT

var currentTime = new Date();

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "BayerChangeoverTimesDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerChangeoverTimesDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var tableLength = filtered.rows.length;

for (var x = 0; x < tableLength; x++) {
	var row = filtered.rows[x];
	
    // BayerChangeoverTimesDataShape entry object
    var newEntry = new Object();
    newEntry.startTime = row.startTime; // DATETIME
    newEntry.endTime = row.endTime; // DATETIME
    newEntry.targetTime = row.targetHours * 60; // INTEGER
    newEntry.actualTime = Math.round(dateDifference(row.status == "INPROGRESS" ? currentTime : row.endTime, row.startTime) / 1000 / 60); // INTEGER
    newEntry.difference = newEntry.actualTime - newEntry.targetTime; // INTEGER

	result.AddRow(newEntry);
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetChangeoverTrendByDate">
<ConfigurationTables>
<ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[ var result = Things["BayerDBDataProvider"].GetChangeoverTrendByDate({
	endDate: endDate,
	line: me.name,
	startDate: startDate
});]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetChangeoverTrendForLine">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var result =  Things["BayerDBDataProvider"].GetChangeoverTrendForLine({
    productionLine: me.name,
    dateTime: dateTime,
    week: week,
});]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetCurrentProduct">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var result = null;

if (me.currentProductKey) {
    try {
        // result: INFOTABLE dataShape: "BayerProductionPlanDataShape"
        result =  Things["BayerDBDataProvider"].GetProductionPlan({
            id: me.currentProductKey /* INTEGER */
        });
    }
    catch (ex) {
        logger.error(me.name + ".GetCurrentProduct() " + ex);
    }
}

if (!result || result.rows.length === 0) {
    // result: INFOTABLE dataShape: "BayerProductionPlanDataShape"
    result =  Things["BayerDBDataProvider"].GetProductionPlanItemByStatus({
        productionLine: me.name /* THINGNAME */,
        status: 'INPROGRESS' /* STRING */
    });

    if (result && result.rows.length > 0) {
        me.currentProductKey = result.id;
    }
    else {
        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerProductionPlanDataShape)
        result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({ dataShapeName : "BayerProductionPlanDataShape" });
    }
}

if (result && result.rows.length > 0) {
    // result: STRING
    result.productDescription =  Things["BayerUtilities"].GetProductDescriptionTranslated({
        productId: result.productId /* STRING */,
        productDescription: result.productDescription /* STRING */
    });
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetMaintenanceTicketsByDate">
<ConfigurationTables>
<ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var result =  Things["BayerDBDataProvider"].GetMaintenanceTicketsByDate({
	endDate: endDate,
	productionLine: me.name,
	startDate: startDate
});]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="GetProductionPlan">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[// result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
var result =  Things["BayerDBDataProvider"].GetProductionPlanForLine({
	line: me.name /* THINGNAME */
});]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="LoadCSVv2">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var lineConfig = me.GetLineConfiguration();

// result: INFOTABLE
var data = Things["BayerUtilities"].LoadCSVGeneric({ delimiter: ";" /* STRING */, filePath: path /* STRING */, repository: repository /* THINGNAME */ });

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerProductionPlanDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({ dataShapeName : "BayerProductionPlanDataShape" });

// result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
var lastItem =  Things["BayerDBDataProvider"].GetLastProductionPlanItem({
	line: me.name /* THINGNAME */
});
var prev = lastItem.rows.length > 0 ? lastItem.rows[0] : undefined;

var tableLength = data.rows.length;
for (var x = 0; x < tableLength; x++) {
	var row = data.rows[x];
    
    try {
        // BayerProductionPlanDataShape entry object
        var newEntry = new Object();
        newEntry.productId = row["Product Number"]; // STRING
        if(isNaN(parseInt(newEntry.productId))) {
            logger.debug(me.name + ".LoadCSVv2: Skipping row " + x + "; product id " + newEntry.productId);
            continue;
        }
        
        newEntry.orderNr = row["Order Number"]; // STRING
        newEntry.productDescription = row["Product Description"]; // STRING
        newEntry.version = row["Version (Batch)"]; // STRING
        newEntry.targetQuantity = parseFloat(row["Operation Quantity"].replace(',', '.').replace(' ', '')); // NUMBER
        newEntry.uom = row["Unit of operation qty"];
        newEntry.activeMaterialNumber = row["Ingredient product number"];
        newEntry.commentFirstLine = row["Comment 1st line"];
        newEntry.blisterType = row["Blister  LxW"];
        newEntry.foldedBoxFormat = row["Folded box LxHxW"];
        newEntry.blistersPerFoldedBox = parseInt(row["Blisters per folded box"]);
        
        try {
        	newEntry.mdatSaf = parseDate(row["MDAT-SAF: Safety Days of Supply Date"], "yyyy-MM-dd");
        }
        catch (dateParseEx) {
            logger.warn(me.name + ".LoadCSVv2 error parsing MDAT-SAF date. Value: " + row["MDAT-SAF: Safety Days of Supply Date"]);
        }
        
        try {
        	newEntry.mdatOos = parseDate(row["MDAT-OOS: Real Out of Stock Date"], "yyyy-MM-dd");
        }
        catch (dateParseEx) {
            logger.warn(me.name + ".LoadCSVv2 error parsing MDAT-OOS date. Value: " + row["MDAT-OOS: Real Out of Stock Date"]);
        }
        
        newEntry.tabletsPerBlister = parseInt(row["Tablets per Blister"]);
        newEntry.manufProcess = row["Manufact. Process"];

        newEntry.targetQuantityPerHour = Things["BayerMaterialPerformanceTable"].GetNominalRate({code: newEntry.productId, productionLine: me.name}) * lineConfig.nominalRateCorrection; // NUMBER
        if (!newEntry.targetQuantityPerHour) {
            logger.warn(me.name + ": no NominalRate for product " + newEntry.productId + ". Setting default 60 PCE per hour.");
            newEntry.targetQuantityPerHour = 60;
        }
        newEntry.targetQuantityPerHour = Math.round(newEntry.targetQuantityPerHour);

        newEntry.targetHours = Math.round(newEntry.targetQuantity / newEntry.targetQuantityPerHour * 100) / 100; // NUMBER
        newEntry.remainingHours = newEntry.targetHours; // NUMBER
        newEntry.productionLine = me.name; // THINGNAME - isPrimaryKey = true
        newEntry.producedQuantity = 0; // NUMBER
        newEntry.startTime = undefined; // DATETIME
        newEntry.endTime = undefined; // DATETIME
        newEntry.workedHours = 0; // NUMBER
        newEntry.status = "PENDING"; // STRING

        if (prev) {
            result.AddRow(getChangeover(prev, newEntry));
        }

        prev = newEntry;

        result.AddRow(newEntry);
    }
    catch (ex) {
        logger.error(me.name + ".LoadCSVv2 error parsing row " + x + ": " + ex);
    }
}

Things["BayerDBDataProvider"].AddProductionPlanItems({
	items: result /* INFOTABLE */
});

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function getChangeover(prevItem, newItem) {
    // BayerProductionPlanDataShape entry object
    var newEntry = new Object();
    newEntry.productId = "Cambio"; // STRING
    newEntry.productionLine = me.name; // THINGNAME - isPrimaryKey = true
    newEntry.producedQuantity = 0; // NUMBER
    newEntry.startTime = undefined; // DATETIME
    newEntry.endTime = undefined; // DATETIME
    newEntry.workedHours = 0; // NUMBER
    newEntry.orderNr = ""; // STRING
    newEntry.productDescription = "Cambio"; // STRING
    newEntry.targetQuantity = 0; // NUMBER
    newEntry.targetQuantityPerHour = 0; // NUMBER
    newEntry.status = "PENDING"; // STRING

    // result: INTEGER
    var activeMaterialTime = Things["BayerChangeoverTimeMatrix_ActiveMaterial"].GetChangeoverTime({
        sourceCode: prevItem.activeMaterialNumber /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.activeMaterialNumber /* STRING */
    });

    // result: INTEGER
    var blisterTime = Things["BayerChangeoverTimeMatrix_BlisterType"].GetChangeoverTime({
        sourceCode: prevItem.blisterType /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.blisterType /* STRING */
    });

    // result: INTEGER
    var fbTime = Things["BayerChangeoverTimeMatrix_FB"].GetChangeoverTime({ 
        sourceCode: prevItem.foldedBoxFormat /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.foldedBoxFormat /* STRING */
    });

    newEntry.targetHours = (Math.max(activeMaterialTime, blisterTime, fbTime) + lineConfig.additionalChangeoverTime) / 60;
    newEntry.targetHours = Math.round(newEntry.targetHours * 100) / 100;
    newEntry.remainingHours = newEntry.targetHours; // NUMBER
    
    return newEntry;
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="LoadProductionPlan">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var lineConfig = me.GetLineConfiguration();

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerProductionPlanDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({ dataShapeName : "BayerProductionPlanDataShape" });

Things["BayerDBDataProvider"].DeleteScheduledProduction({
	productionLine: me.name /* THINGNAME */
});

if (data.rows.length === 1 && data.productId === 'standby') {
    addStandby();
}
else {
    processInputData();
}

Things["BayerDBDataProvider"].AddProductionPlanItems({
    items: result /* INFOTABLE */
});

me.lastProductionPlanUpdate = new Date();
logger.info(me.name + " PRODUCTION PLAN UPLOADED");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function addStandby() {
    // BayerProductionPlanDataShape entry object
    var newEntry = new Object();
    newEntry.productId = "standby"; // STRING
    newEntry.productionLine = me.name; // THINGNAME - isPrimaryKey = true
    newEntry.producedQuantity = 0; // NUMBER
    newEntry.startTime = undefined; // DATETIME
    newEntry.endTime = undefined; // DATETIME
    newEntry.workedHours = 0; // NUMBER
    newEntry.orderNr = ""; // STRING
    newEntry.productDescription = "No scheduled production"; // STRING
    newEntry.targetQuantity = 0; // NUMBER
    newEntry.targetQuantityPerHour = 0; // NUMBER
    newEntry.status = "PENDING"; // STRING
    newEntry.targetHours = 168; // 7 days
    newEntry.remainingHours = newEntry.targetHours; // NUMBER
    result.AddRow(newEntry);
}

function processInputData() {
    // result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
    var lastItem =  Things["BayerDBDataProvider"].GetLastProductionPlanItem({
        line: me.name /* THINGNAME */
    });
    var prev = lastItem.rows.length > 0 ? lastItem.rows[0] : undefined;

    var tableLength = data.rows.length;
    for (var x = 0; x < tableLength; x++) {
        var row = data.rows[x];

        try {
            // BayerProductionPlanDataShape entry object
            var newEntry = new Object();
            newEntry.productionLine = me.name; // THINGNAME - isPrimaryKey = true
            newEntry.status = "PENDING"; // STRING

            //////////////// FROM FILE ///////////////////////

            newEntry.productId = row.productId; // STRING
            if(isNaN(parseInt(newEntry.productId))) {
                logger.debug(me.name + ".LoadProductionPlan: Skipping row " + x + "; product id " + newEntry.productId);
                continue;
            }

            newEntry.orderNr = row.orderNr; // STRING
            newEntry.productDescription = row.productDescription; // STRING
            newEntry.version = row.version; // STRING
            newEntry.targetQuantity = parseFloat(row.targetQuantity.replace(',', '.').replace(' ', '')); // NUMBER
            newEntry.uom = row.uom;
            newEntry.activeMaterialNumber = row.activeMaterialNumber;
            newEntry.commentFirstLine = row.commentFirstLine;
            newEntry.blisterType = row.blisterType;
            newEntry.foldedBoxFormat = row.foldedBoxFormat;
            newEntry.blistersPerFoldedBox = parseIntSafe(row.blistersPerFoldedBox);

            try {
                newEntry.mdatSaf = parseDate(row.mdatSaf, "yyyy-MM-dd");
            }
            catch (dateParseEx) {
                logger.warn(me.name + ".LoadProductionPlan error parsing MDAT-SAF date. Value: " + row.mdatSaf);
            }

            try {
                newEntry.mdatOos = parseDate(row.mdatOos, "yyyy-MM-dd");
            }
            catch (dateParseEx) {
                logger.warn(me.name + ".LoadProductionPlan error parsing MDAT-OOS date. Value: " + row.mdatOos);
            }

            newEntry.tabletsPerBlister = parseIntSafe(row.tabletsPerBlister);
            newEntry.manufProcess = row.manufProcess;

            ///////////// CALCULATED //////////////////

            var blitersPerBoxCorrection = 1;
            if (lineConfig.nominalRateInBlisters) {
                if (newEntry.blistersPerFoldedBox) {
                    blitersPerBoxCorrection = newEntry.blistersPerFoldedBox;
                }
                else {
                    logger.error(me.name + ".LoadProductionPlan error: nominalRateInBlisters but no blistersPerFoldedBox provided");
                }
            }

            newEntry.targetQuantityPerHour = (Things["BayerMaterialPerformanceTable"].GetNominalRate({code: newEntry.productId, productionLine: me.name}) / blitersPerBoxCorrection) * lineConfig.nominalRateCorrection; // NUMBER
            if (!newEntry.targetQuantityPerHour) {
                logger.warn(me.name + ".LoadProductionPlan - no NominalRate for product " + newEntry.productId + ". Setting default 60 PCE per hour.");
                newEntry.targetQuantityPerHour = 60;
            }
            newEntry.targetQuantityPerHour = Math.round(newEntry.targetQuantityPerHour);

            newEntry.targetHours = Math.round(newEntry.targetQuantity / newEntry.targetQuantityPerHour * 100) / 100; // NUMBER
            newEntry.remainingHours = newEntry.targetHours; // NUMBER
            newEntry.producedQuantity = 0; // NUMBER
            newEntry.startTime = undefined; // DATETIME
            newEntry.endTime = undefined; // DATETIME
            newEntry.workedHours = 0; // NUMBER

            if (prev) {
                result.AddRow(getChangeover(prev, newEntry));
            }

            prev = newEntry;

            logger.debug(me.name + ".LoadProductionPlan row nr: " + x + ": " + JSON.stringify(newEntry));

            result.AddRow(newEntry);
        }
        catch (ex) {
            logger.error(me.name + ".LoadProductionPlan error parsing row " + x + ": " + ex);
        }
    }

    logger.debug(me.name + ".LoadProductionPlan content: " + JSON.stringify(result.ToJSON()));
}

function getChangeover(prevItem, newItem) {
    // BayerProductionPlanDataShape entry object
    var newEntry = new Object();
    newEntry.productId = "Cambio"; // STRING
    newEntry.productionLine = me.name; // THINGNAME - isPrimaryKey = true
    newEntry.producedQuantity = 0; // NUMBER
    newEntry.startTime = undefined; // DATETIME
    newEntry.endTime = undefined; // DATETIME
    newEntry.workedHours = 0; // NUMBER
    newEntry.orderNr = ""; // STRING
    newEntry.productDescription = "Cambio"; // STRING
    newEntry.targetQuantity = 0; // NUMBER
    newEntry.targetQuantityPerHour = 0; // NUMBER
    newEntry.status = "PENDING"; // STRING

    // result: INTEGER
    var activeMaterialTime = Things["BayerChangeoverTimeMatrix_ActiveMaterial"].GetChangeoverTime({
        sourceCode: prevItem.activeMaterialNumber /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.activeMaterialNumber /* STRING */
    });

    // result: INTEGER
    var blisterTime = Things["BayerChangeoverTimeMatrix_BlisterType"].GetChangeoverTime({
        sourceCode: prevItem.blisterType /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.blisterType /* STRING */
    });

    // result: INTEGER
    var fbTime = Things["BayerChangeoverTimeMatrix_FB"].GetChangeoverTime({ 
        sourceCode: prevItem.foldedBoxFormat /* STRING */,
        productionLine: me.name /* THINGNAME */,
        targetCode: newItem.foldedBoxFormat /* STRING */
    });

    newEntry.targetHours = (Math.max(activeMaterialTime, blisterTime, fbTime) + lineConfig.additionalChangeoverTime) / 60;
    newEntry.targetHours = Math.round(newEntry.targetHours * 100) / 100;
    newEntry.remainingHours = newEntry.targetHours; // NUMBER
    
    return newEntry;
}

function parseIntSafe(value) {
    var parsedVal = parseInt(value);
    return isNaN(parsedVal) ? undefined : parsedVal;
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="UpdateCounter">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var incomingValue = eventData.newValue.value;

if (me.previousProductCounter <= incomingValue) {
    me.counter = incomingValue - me.previousProductCounter;
}
else {
    me.previousProductCounter = 0;
    me.counter = incomingValue;
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
<ServiceImplementation description="" handlerName="Script" name="UpdateProduct">
<ConfigurationTables>
<ConfigurationTable description="Script" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[if (!me.updateProductLock) {
    // result: INFOTABLE dataShape: "BayerProductionPlanDbDataShape"
    var currentProduct = me.GetCurrentProduct();

    // dateDifference(date1:DATETIME,date2:DATETIME):NUMBER
    var difference = dateDifference(eventData.timestamp, currentProduct.startTime);

    currentProduct.workedHours = difference / 1000.0 / 60.0 / 60.0;
    currentProduct.remainingHours = currentProduct.targetHours - currentProduct.workedHours;
    if (currentProduct.remainingHours < 0) {
        currentProduct.remainingHours = 0;
    }
    
     Things["BayerDBDataProvider"].UpdateProductionPlanHours({
        data: currentProduct /* INFOTABLE */
    });
}]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
</ServiceImplementations>
<Subscriptions>
<Subscription description="" enabled="true" eventName="DataChange" name="OnKepwareCounterChanged" source="" sourceProperty="kepwareCounter">
<ServiceImplementation description="" handlerName="Script" name="OnKepwareCounterChanged">
<ConfigurationTables>
<ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
<DataShape>
<FieldDefinitions>
<FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
</FieldDefinitions>
</DataShape>
<Rows>
<Row>
<code><![CDATA[var params = {
	eventData: eventData /* INFOTABLE */
};

me.UpdateCounter(params);]]></code>
</Row>
</Rows>
</ConfigurationTable>
</ConfigurationTables>
</ServiceImplementation>
</Subscription>
</Subscriptions>
<Owner name="lstrzelecki" type="User"/>
<avatar/>
<DesignTimePermissions>
<Create/>
<Read/>
<Update/>
<Delete/>
<Metadata/>
</DesignTimePermissions>
<RunTimePermissions/>
<VisibilityPermissions>
<Visibility>
<Principal isPermitted="true" name="Bayer:PerformanceDashboard" type="OrganizationalUnit"/>
</Visibility>
</VisibilityPermissions>
<ConfigurationTableDefinitions/>
<ConfigurationTables/>
<PropertyBindings/>
<RemotePropertyBindings/>
<RemoteServiceBindings/>
<RemoteEventBindings/>
<AlertConfigurations>
<AlertDefinitions name="counter"/>
<AlertDefinitions name="currentProductKey"/>
<AlertDefinitions name="kepwareCounter"/>
<AlertDefinitions name="lastProductionPlanUpdate"/>
<AlertDefinitions name="previousProductCounter"/>
<AlertDefinitions name="productionlinestatus"/>
<AlertDefinitions name="productionsensorvalue"/>
<AlertDefinitions name="updateProductLock"/>
</AlertConfigurations>
<InstanceRunTimePermissions>
<Permissions resourceName="CompleteCurrentProduct">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="false" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetChangeoverTrendForLine">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetChangeoverTime">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="currentProductKey">
<PropertyRead>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</PropertyRead>
<PropertyWrite>
<Principal isPermitted="false" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="System" type="User"/>
</PropertyWrite>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="UpdateProduct">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="System" type="User"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="lastProductionPlanUpdate">
<PropertyRead/>
<PropertyWrite>
<Principal isPermitted="true" name="BayerProductionPlansProcessingUser" type="User"/>
</PropertyWrite>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="*">
<PropertyRead>
<Principal isPermitted="true" name="System" type="User"/>
</PropertyRead>
<PropertyWrite/>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetCurrentProduct">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="BayerDelaysSystemUser" type="User"/>
<Principal isPermitted="true" name="BayerNotificationSystemUser" type="User"/>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
<Principal isPermitted="true" name="System" type="User"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="counter">
<PropertyRead>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</PropertyRead>
<PropertyWrite>
<Principal isPermitted="false" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="System" type="User"/>
</PropertyWrite>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetProductionPlan">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetChangeoverTrendByDate">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetChangeoverDetailsTrendForLine">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="updateProductLock">
<PropertyRead/>
<PropertyWrite>
<Principal isPermitted="true" name="System" type="User"/>
</PropertyWrite>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="LoadProductionPlan">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="BayerProductionPlansProcessingUser" type="User"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="previousProductCounter">
<PropertyRead/>
<PropertyWrite>
<Principal isPermitted="true" name="System" type="User"/>
</PropertyWrite>
<ServiceInvoke/>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetChangeoverTimes">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="UpdateCounter">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="System" type="User"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
<Permissions resourceName="GetMaintenanceTicketsByDate">
<PropertyRead/>
<PropertyWrite/>
<ServiceInvoke>
<Principal isPermitted="true" name="Role.BayerOffice" type="Group"/>
<Principal isPermitted="true" name="Role.BayerProductionLine.Any" type="Group"/>
</ServiceInvoke>
<EventInvoke/>
<EventSubscribe/>
</Permissions>
</InstanceRunTimePermissions>
<ConfigurationChanges>
<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-08-30T12:21:03.800Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="CREATE" changeReason="" timestamp="2019-09-06T11:18:50.470Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-06T12:42:07.366Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSV : service deleted&#10;" timestamp="2019-09-06T12:42:26.241Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-06T12:49:39.006Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetProductionPlan : service updated&#10;" timestamp="2019-09-06T12:57:46.304Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-06T13:09:09.789Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-06T13:14:51.621Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-06T13:19:39.300Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="properties : currentProductKey : updated&#10;" timestamp="2019-09-06T13:20:40.907Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-06T13:24:13.447Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : output updated&#10;" timestamp="2019-09-06T13:28:26.629Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : service updated&#10;" timestamp="2019-09-06T13:30:26.298Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2019-09-06T13:48:43.954Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateProduct : service updated&#10;" timestamp="2019-09-06T13:56:23.284Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : UpdateProduct : service updated&#10;" timestamp="2019-09-06T14:20:39.209Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : output updated&#10;" timestamp="2019-09-06T14:30:11.021Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : output updated&#10;GetProductionPlan : output updated&#10;" timestamp="2019-09-06T15:03:35.805Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-07T19:58:30.975Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-09-07T20:08:00.782Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-09-09T15:21:04.407Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-09-09T15:21:21.375Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2019-09-09T15:21:21.453Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-11T14:48:49.095Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-11T14:48:56.595Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-11T14:49:11.485Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-11T14:49:37.375Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-09-13T14:10:50.271Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-13T14:25:15.944Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-13T14:27:57.063Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-13T14:31:29.431Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-13T14:31:39.040Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-09-13T14:48:04.678Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2019-09-17T10:08:31.371Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2019-09-17T10:08:50.761Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetProductionPlanWithStatusFormatted : service added&#10;" timestamp="2019-09-20T13:08:55.691Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetProductionPlanWithStatusFormatted : output updated&#10;" timestamp="2019-09-20T13:47:59.033Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetProductionPlanWithStatusFormatted : service updated&#10;" timestamp="2019-09-20T13:55:21.255Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetProductionPlanWithStatusFormatted : service deleted&#10;" timestamp="2019-09-20T13:55:30.349Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendForLine : service added, input parameter endTime deleted, inputs updated, output updated, input parameter productionLine added, inputs updated&#10;" timestamp="2019-09-27T11:11:20.812Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendForLine : input parameter week added, inputs updated&#10;" timestamp="2019-09-27T11:51:04.606Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendForLine : input parameter dateTime updated, inputs updated, input parameter week updated, inputs updated&#10;" timestamp="2019-09-27T13:03:11.861Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-10-03T14:07:11.732Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendForLine : input parameter productionLine deleted, inputs updated&#10;" timestamp="2019-10-03T14:20:53.646Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : NewProductStarted : added&#10;" timestamp="2019-10-03T15:26:23.931Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : NewProductStarted : code updated&#10;" timestamp="2019-10-03T15:27:47.632Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-10-03T15:28:12.475Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendForLine : service updated&#10;GetChangeoverDetailsTrendForLine : service added&#10;" timestamp="2019-10-08T09:18:38.313Z" user="aborkowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : Event.DataChange:Property.kepwareCounter : code updated, removed&#10;OnKepwareCounterChanged : added&#10;" timestamp="2019-10-11T11:39:42.511Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : NewProductStarted : code updated, removed&#10;OnCurrentProductKeyChanged : added&#10;" timestamp="2019-10-11T11:56:51.770Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2019-11-18T16:58:51.115Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-11-20T12:17:46.603Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service added, input parameter path deleted, inputs updated, input parameter data added, inputs updated&#10;" timestamp="2019-11-21T13:55:39.215Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T17:07:31.049Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T17:17:38.101Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T17:54:33.047Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T17:55:32.389Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-11-21T17:57:08.637Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T17:57:24.965Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="properties : additionalChangeoverTime : removed, nominalRateCorrection : removed&#10;" timestamp="2019-11-21T18:32:36.985Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-21T19:04:47.222Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="properties : lastProductionPlanUpdate : added&#10;" timestamp="2019-11-21T19:07:51.812Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="subscriptions : OnCurrentProductKeyChanged : removed&#10;" timestamp="2019-11-21T19:23:52.387Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : output updated&#10;" timestamp="2019-11-28T12:30:31.964Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-11-28T13:46:14.712Z" user="rafjurek"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-11-29T11:19:42.417Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T11:44:40.460Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T11:56:18.828Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T12:53:36.259Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T13:10:14.342Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T13:25:04.879Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : input parameter repository added, inputs updated&#10;" timestamp="2019-11-29T13:30:25.703Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadCSVv2 : service updated&#10;" timestamp="2019-11-29T13:44:40.679Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T13:47:15.818Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-11-29T13:47:55.505Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-02T15:25:58.703Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-02T15:35:17.004Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : service updated&#10;" timestamp="2019-12-02T15:35:17.098Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendByDate : service added&#10;" timestamp="2019-12-18T12:26:40.986Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendByDate : service updated&#10;" timestamp="2019-12-18T13:41:37.523Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendByDate : output updated&#10;" timestamp="2019-12-18T13:43:29.976Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTrendByDate : service updated&#10;" timestamp="2019-12-18T13:43:49.789Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-19T10:25:11.296Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-19T10:29:37.170Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : service updated&#10;" timestamp="2019-12-19T10:29:37.327Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : service updated&#10;" timestamp="2019-12-19T10:33:38.187Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-19T10:41:23.935Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2019-12-19T10:44:42.262Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetMaintenanceTicketsByDate : service added&#10;" timestamp="2019-12-19T10:44:42.528Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetMaintenanceTicketsByDate : input parameter productionLine deleted, inputs updated&#10;" timestamp="2019-12-19T10:45:10.950Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetMaintenanceTicketsByDate : output updated&#10;" timestamp="2019-12-19T10:46:21.419Z" user="jzawiasa"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetCurrentProduct : service updated&#10;" timestamp="2019-12-19T10:49:06.762Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : isAllowOverride updated&#10;" timestamp="2020-02-18T13:21:45.549Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="properties : productionlinestatus : added, productionsensorvalue : added, productionsensorvalue : updated&#10;" timestamp="2020-02-20T22:11:05.313Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="properties : productionsensorvalue : updated&#10;" timestamp="2020-02-24T11:18:01.069Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2020-02-25T15:00:09.854Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="ForceEdit" timestamp="2020-02-25T15:00:22.416Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : CompleteCurrentProduct : service updated&#10;" timestamp="2020-02-25T15:00:22.510Z" user="lstrzelecki"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : isAllowOverride updated&#10;" timestamp="2020-02-27T21:49:51.955Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : isAllowOverride updated&#10;" timestamp="2020-02-27T21:50:13.704Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : isAllowOverride updated&#10;" timestamp="2020-02-27T21:52:12.684Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : LoadProductionPlan : isAllowOverride updated&#10;" timestamp="2020-02-27T21:54:36.022Z" user="Administrator"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2020-03-31T08:54:23.667Z" user="rgniazdowski"/>
<ConfigurationChange changeAction="MODIFY" changeReason="services : GetChangeoverTime : service updated&#10;" timestamp="2020-03-31T09:11:59.948Z" user="rgniazdowski"/>
</ConfigurationChanges>
</ThingShape>
</ThingShapes>
</Entities>
