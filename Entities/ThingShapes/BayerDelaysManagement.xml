<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="">
    <ThingShapes>
        <ThingShape
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-04-09T15:08:13.876Z"
         name="BayerDelaysManagement"
         projectName="BayerIoT"
         tags="Applications:Bayer">
            <PropertyDefinitions>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 baseType="DATETIME"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="changeoverDelayStartTime"
                 ordinal="11"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 baseType="DATETIME"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="changeoverStartTime"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.minimumValue="0.0"
                 aspect.units="min"
                 baseType="NUMBER"
                 category=""
                 description="Threshold time - if a delay was longer, we register a breakdown"
                 isLocalOnly="false"
                 name="delayBreakDownTimeMoreThan"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.minimumValue="0"
                 baseType="INTEGER"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="delayMicrostopCount"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.minimumValue="0"
                 baseType="INTEGER"
                 category=""
                 description="Threshold count - nr of micro stops allowed. After that a delay will be recorded in DB."
                 isLocalOnly="false"
                 name="delayMicrostopCountMax"
                 ordinal="13"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.units="min"
                 baseType="NUMBER"
                 category=""
                 description="Total duration of micro-stops after with delay will trigger"
                 isLocalOnly="false"
                 name="delayMicrostopTime"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.minimumValue="0.0"
                 aspect.units="min"
                 baseType="NUMBER"
                 category=""
                 description="Threshold time - if a delay was shorter, we register a microstop"
                 isLocalOnly="false"
                 name="delayMicrostopTimeLessThan"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 aspect.minimumValue="0.0"
                 aspect.units="min"
                 baseType="NUMBER"
                 category=""
                 description="Threshold time - total duration of micro-stops allowed. After that delay will be recorded in DB"
                 isLocalOnly="false"
                 name="delayMicrostopTimeMax"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 baseType="DATETIME"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="delayMicrostopTimeStart"
                 ordinal="12"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="true"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 baseType="BOOLEAN"
                 category=""
                 description="simulate production"
                 isLocalOnly="false"
                 name="productionRunning"
                 ordinal="7"></PropertyDefinition>
            </PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDelayShiftDetails">
                    <ResultType
                     aspect.dataShape="GetDelayShiftDetailsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="shiftScheduleId"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDelaysSummary">
                    <ResultType
                     aspect.dataShape="BayerDelaysSummaryDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INTEGER"
                         description=""
                         name="shiftScheduleId"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="InsertDelayEntry">
                    <ResultType
                     aspect.dataShape="BayerDelayDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="category"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="endTime"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="startTime"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="totalDuration"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="InsertShiftEventEntry">
                    <ResultType
                     aspect.dataShape="BayerDelayDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="category"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="endTime"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="startTime"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessChangeoverDelayRules">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="TimerEvent"
                         baseType="INFOTABLE"
                         description=""
                         name="eventData"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessEventsOnShiftChange">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="DataChangeEvent"
                         baseType="INFOTABLE"
                         description=""
                         name="eventData"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessProductionDelayRules">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="DataChangeEvent"
                         baseType="INFOTABLE"
                         description=""
                         name="eventData"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessSwitchShift">
                    <ResultType
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="executed after entry microstop and change shift"
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ResetMicrostopDelayProperties">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateDelayShift">
                    <ResultType
                     aspect.dataShape="BayerDelayDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="GetDelayShiftDetailsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="delayShift"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="INTEGER"
                         description=""
                         name="id"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions>
                <EventDefinition
                 category=""
                 dataShape="BayerDelayEventDataShape"
                 description=""
                 name="ProductionDelayed"></EventDefinition>
            </EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDelayShiftDetails">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Things['BayerDBDataProvider'].GetDelayShiftDetails({
                                        shiftScheduleId: shiftScheduleId
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDelaysSummary">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Things['BayerDBDataProvider'].GetDelaysSummary({
                                        shiftScheduleId: shiftScheduleId
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="InsertDelayEntry">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INFOTABLE dataShape: "BayerShiftScheduleDataShape"
                                    var currentShift = Things["BayerUtilities"].GetCurrentShift({
                                    	lineName: me.name /* THINGNAME */
                                    });
                                    var shiftScheduleId = currentShift.id;
                                    
                                    var delayEntry = {
                                        source: "",
                                        category: category,
                                        shiftScheduleId: shiftScheduleId,
                                        startTime: startTime,
                                        endTime: endTime,
                                        totalDuration: totalDuration
                                    };
                                    
                                    var result = Things["BayerDBDataProvider"].InsertDelayEntry(delayEntry);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="InsertShiftEventEntry">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var currentShift = Things["BayerUtilities"].GetCurrentShift({
                                    	lineName: me.name /* THINGNAME */
                                    });
                                    var shiftScheduleId = currentShift.id;
                                    
                                    var delayEntry = {
                                        source: me.name,
                                        category: category,
                                        shiftScheduleId: shiftScheduleId,
                                        startTime: startTime,
                                        endTime: endTime
                                    };
                                    
                                    var result = Things["BayerDBDataProvider"].InsertShiftEventEntry(delayEntry);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessChangeoverDelayRules">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // check id changeover
                                    var currentProduct = me.GetCurrentProduct();
                                    var isProductionTargetZero = (currentProduct.targetQuantity === 0);
                                    var isProductCambio = (currentProduct.productId === 'Cambio');
                                    var isChangeover = (isProductionTargetZero || isProductCambio);
                                    
                                    // update or create events only if production is running
                                    if (me.productionRunning) {
                                    	var shiftEvents = Things["BayerDBDataProvider"].GetShiftEvents({
                                    		shiftScheduleId: me.currentShiftId
                                    	});
                                    	var shouldUpdateLastTask = false;
                                    	var newTaskCategory = '';
                                        // check if is any event on current shift 
                                    	if (shiftEvents.getRowCount() !== 0) {
                                            // find status of last event
                                    		var lastEvent = shiftEvents.rows[shiftEvents.getRowCount() - 1];
                                    		var lastStatus = lastEvent.category;
                                            // decide if should update event or create new
                                    		if (isChangeover) {
                                    			if (lastStatus == 'changeover') {
                                    				shouldUpdateLastTask = true;
                                    			} else {
                                    				newTaskCategory = 'changeover';
                                    			}
                                    		} else {
                                    			if (lastStatus == 'running') {
                                    				shouldUpdateLastTask = true;
                                    			} else {
                                    				newTaskCategory = 'running';
                                    			}
                                    		}
                                            // depending on decision create or update event
                                    		if (shouldUpdateLastTask) {
                                    			Things["BayerDBDataProvider"].UpdateShiftEvent({
                                    				endTime: Date.now(),
                                    				id: lastEvent.id,
                                    				shiftScheduleId: me.currentShiftId
                                    			});
                                    		} else {
                                    			Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                    				startTime: lastEvent.endTime,
                                    				endTime: Date.now(),
                                    				shiftScheduleId: me.currentShiftId,
                                    				source: me.name,
                                    				category: newTaskCategory
                                    			});
                                    		}
                                    	}
                                        // if shift event list is empty create new task 
                                        else {
                                    		var shiftSchedule = Things["BayerDBDataProvider"].GetShiftScheduleById({
                                    			id: me.currentShiftId
                                    		});
                                    		if (isChangeover) {
                                    			newTaskCategory = 'changeover';
                                    		} else {
                                    			newTaskCategory = 'running';
                                    		}
                                    		Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                    			startTime: shiftSchedule.timestamp,
                                    			endTime: Date.now(),
                                    			shiftScheduleId: me.currentShiftId,
                                    			source: me.name,
                                    			category: newTaskCategory
                                    		});
                                    	}
                                    }
                                    
                                    if (currentProduct && currentProduct.getRowCount() > 0) {
                                    	//logger.debug('S:ProcessChangeoverDelayRules');
                                    	var isChangeoverExeedTarget = (currentProduct.workedHours * 60) >
                                    		(currentProduct.targetHours * 60) + (currentProduct.targetHours * 60 * 0.1);
                                    
                                    	/* Requirments
                                    		- All changeovers which exceed the target by more than 10% generate entries.
                                    	*/
                                    
                                    	if (isChangeover === true &&
                                    		isChangeoverExeedTarget === true &&
                                    		me.changeoverDelayStartTime.getTime() === (new Date(0).getTime())
                                    	) {
                                    		me.changeoverDelayStartTime = new Date();
                                    	} else if (
                                    		isChangeover === false &&
                                    		me.changeoverDelayStartTime.getTime() !== (new Date(0).getTime())
                                    	) {
                                    		//logger.debug('S:ChangeoverDelayedOver:ChangeoverDelayed');
                                    		me.ProductionDelayed({
                                    			category: 'changeover',
                                    			/* STRING */
                                    			startTime: me.changeoverDelayStartTime,
                                    			endTime: new Date(),
                                    			/* DATETIME */
                                    		});
                                    		//logger.debug('S:ChangeoverDelayedOver.ResetTimer');
                                    		me.changeoverDelayStartTime = new Date(0);
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessEventsOnShiftChange">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // get event from previous shift
                                    var prevShiftEvents = Things["BayerDBDataProvider"].GetShiftEvents({
                                            	shiftScheduleId: eventData.oldValue.value
                                            });
                                    // get data about previous shift (id and timestamp may be needed)
                                    var prevShift = Things["BayerDBDataProvider"].GetShiftScheduleById({
                                            	id: eventData.oldValue.value
                                            });
                                    var lastEvent;
                                    // get event from current (new) shift
                                    var currentShift = Things["BayerDBDataProvider"].GetShiftScheduleById({
                                            	id: eventData.newValue.value
                                            });
                                    if(me.productionRunning){
                                        	// finish last event from previous shift
                                            lastEvent = prevShiftEvents.rows[prevShiftEvents.getRowCount() - 1];
                                            Things["BayerDBDataProvider"].UpdateShiftEvent({
                                            	endTime: dateAddHours(prevShift.timestamp, 8),
                                            	id: lastEvent.id,
                                            	shiftScheduleId: eventData.oldValue.value
                                            });
                                            //add first event to new shift
                                                var category;
                                            	var currentProduct = me.GetCurrentProduct();
                                                var isProductionTargetZero = (currentProduct.targetQuantity === 0);
                                                var isProductCambio = (currentProduct.productId === 'Cambio');
                                    			var isChangeover = (isProductionTargetZero || isProductCambio);
                                        		// select event catagory
                                            	if (isChangeover) {
                                            		category = "changeover";
                                            	} else {
                                            		category = "running";
                                            	}
                                            var result = Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                            	startTime: currentShift.timestamp,
                                            	endTime: Date.now() ,
                                            	shiftScheduleId: eventData.newValue.value,
                                            	source: me.name,
                                            	category: category
                                            });
                                    }
                                    // cases when production isn't running
                                    else{
                                        // if there was any event on  previous shift, update endtime 
                                        if(prevShiftEvents.getRowCount() !== 0){
                                        	lastEvent = prevShiftEvents.rows[prevShiftEvents.getRowCount() - 1];
                                            // if previous event was breakdown, update event 
                                            if(lastEvent.category === "breakdown"){
                                                Things["BayerDBDataProvider"].UpdateShiftEvent({
                                            	endTime: dateAddHours(prevShift.timestamp, 8),
                                            	id: lastEvent.id,
                                            	shiftScheduleId: eventData.oldValue.value
                                            });
                                            }
                                            // insert new taks if previously other type of event occured
                                            else{
                                            	Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                            	startTime: lastEvent.endTime,
                                            	endTime: dateAddHours(prevShift.timestamp, 8) ,
                                            	shiftScheduleId: eventData.oldValue.value,
                                            	source: me.name,
                                            	category: 'breakdown'
                                            });
                                            }
                                        }
                                        // if previous shift event list is empty and previous shift exists,
                                        // insert one shift-long event
                                        else if (prevShift) {
                                        	Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                            	startTime: prevShift.timestamp,
                                            	endTime: dateAddHours(prevShift.timestamp, 8) ,
                                            	shiftScheduleId: eventData.oldValue.value,
                                            	source: me.name,
                                            	category: 'breakdown'
                                            });
                                        }
                                        //add first event to new shift
                                        Things["BayerDBDataProvider"].InsertShiftEventEntry({
                                            	startTime: currentShift.timestamp,
                                            	endTime: Date.now() ,
                                            	shiftScheduleId: eventData.newValue.value,
                                            	source: me.name,
                                            	category: 'breakdown'
                                            });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessProductionDelayRules">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var lineConfig = me.GetLineConfiguration();
                                    
                                    var currentProduct = me.GetCurrentProduct();
                                    
                                    var delayCategory = {
                                    	microstop: 'microstop',
                                    	breakdown: 'breakdown',
                                    };
                                    
                                    var oldProductionRunning = {
                                    	value: eventData.oldValue.value,
                                    	time: eventData.oldValue.time,
                                    };
                                    var newProductionRunning = {
                                    	value: eventData.newValue.value,
                                    	time: eventData.newValue.time,
                                    };
                                    
                                    var now = new Date();
                                    var diffTime = dateDifference(newProductionRunning.time, oldProductionRunning.time) / 1000 / 60;
                                    
                                    // - Green indicating when the machine was running
                                    //if (newProductionRunning.value === false) {
                                    //    me.InsertShiftEventEntry({
                                    //        category: 'running' /* STRING */,
                                    //        startTime: oldProductionRunning.time /* DATETIME */,
                                    //        endTime: now /* DATETIME */
                                    //   });
                                    //}
                                    
                                    // comeback from not runing production
                                    if (newProductionRunning.value === true) {
                                    	if (diffTime < lineConfig.delayMicrostopBreakdownThreshold) {
                                    		//logger.debug('ProcessProductionDelayRules:microstopProcess:diffTime:'+ diffTime);
                                    
                                    		// Orange indicating when there was an active production order with a
                                    		// target greater than zero (>0), but the machine stopped (based on “State” tag)
                                    		// for less than X minutes – value is configurable.
                                    		me.InsertShiftEventEntry({
                                    			category: 'microstop' /* STRING */ ,
                                    			startTime: oldProductionRunning.time /* DATETIME */ ,
                                    			endTime: now /* DATETIME */
                                    		});
                                    
                                    		//count microstop
                                    		//me.delayMicrostopCount = me.delayMicrostopCount + 1;
                                    		me.delayMicrostopCount += 1;
                                    		//logger.debug('ProcessProductionDelayRules:me.delayMicrostopCount:' + me.delayMicrostopCount);
                                    		//sum time of microstop
                                    		if (me.delayMicrostopTime === 0) {
                                    			// init counters
                                    			me.delayMicrostopTimeStart = oldProductionRunning.time; //m
                                    			me.delayMicrostopTime = diffTime;
                                    		} else {
                                    			me.delayMicrostopTime += diffTime; //m
                                    		}
                                    		//logger.debug('ProcessProductionDelayRules:me.delayMicrostopTime:' + me.delayMicrostopTime);
                                    
                                    		//counter exeed
                                    		if (me.delayMicrostopCount > lineConfig.delayMicrostopCountMax ||
                                    			me.delayMicrostopTime > lineConfig.delayMicrostopTimeMax
                                    		) {
                                    			me.ProductionDelayed({
                                    				startTime: me.delayMicrostopTimeStart /* DATETIME */ ,
                                    				endTime: now /* DATETIME */ ,
                                    				category: delayCategory.microstop /* STRING */,
                                                    totalDuration: new Date (me.delayMicrostopTime * 60 * 1000)
                                    			});
                                    			me.ResetMicrostopDelayProperties();
                                    		}
                                    	} else if (diffTime >= lineConfig.delayMicrostopBreakdownThreshold) {
                                    		me.ProductionDelayed({
                                    			startTime: oldProductionRunning.time /* DATETIME */ ,
                                    			endTime: newProductionRunning.time /* DATETIME */ ,
                                    			category: delayCategory.breakdown /* STRING */,
                                                totalDuration: new Date (newProductionRunning.time.getTime() - oldProductionRunning.time.getTime())
                                    		});
                                    
                                    		// Red indicates when there was an active production order with a target
                                    		// greater than zero (>0), but the machine stopped (based on “State” tag) for
                                    		// more than Y minutes – value is configurable.
                                    
                                    
                                    		//check if current shift has any shift event
                                    		var currentShiftEvents = Things["BayerDBDataProvider"].GetShiftEvents({
                                    			shiftScheduleId: me.currentShiftId
                                    		});
                                    		var finishTime;
                                    		if (currentShiftEvents.getRowCount() === 0) {
                                    			me.InsertShiftEventEntry({
                                    				category: 'breakdown' /* STRING */ ,
                                    				startTime: Things["BayerUtilities"].GetCurrentShiftTime().startTime /* DATETIME */ ,
                                    				endTime: Date.now()
                                    			});
                                    
                                    		} else {
                                    			var lastEvent = currentShiftEvents.rows[currentShiftEvents.getRowCount() - 1];
                                    			if (lastEvent.category === 'breakdown') {
                                    				Things["BayerDBDataProvider"].UpdateShiftEvent({
                                    					endTime: Date.now(),
                                    					id: lastEvent.id,
                                    					shiftScheduleId: me.currentShiftId
                                    				});
                                    			} else {
                                    				me.InsertShiftEventEntry({
                                    					category: 'breakdown',
                                    					startTime: lastEvent.endTime,
                                    					endTime: Date.now()
                                    				});
                                    			}
                                    
                                    		}
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessSwitchShift">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    /* @DRAFT @DEPRACATED @todo delete if no need */
                                    
                                    // result: INFOTABLE dataShape: BayerShiftTimeDataShape
                                    var shiftTime = Things["BayerUtilities"].GetCurrentShiftTime();
                                    
                                    var startTime = shiftTime.startTime;
                                    
                                    // result: INFOTABLE dataShape: "BayerShiftSchedulesDataShape"
                                    var prevShift =  Things["BayerDBDataProvider"].GetSingleShiftByTime({
                                    	productionLine: 'BayerIMA90C1' /* THINGNAME */,
                                    	shiftTime: dateAddHours(shiftTime.startTime, 1*-8) /* DATETIME */,
                                    });
                                    
                                    var isProduced = (prevShift.totalQuantityProduced > 0);
                                    //var isEventsExist = ;
                                    
                                    
                                    if (isEventsExist === false && isProduced === true) {
                                        me.InsertShiftEventEntry({
                                            category: 'running' /* STRING */,
                                            startTime: dateAddHours(shiftTime.startTime, 1*-8) /* DATETIME */,
                                            endTime: shiftTime.startTime /* DATETIME */
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ResetMicrostopDelayProperties">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // executed after entry microstop and change shift
                                    logger.debug(me.name + ' !!! RESET MISCROSTOP COUNTERS !!!');
                                    me.delayMicrostopCount = 0;
                                    me.delayMicrostopTime = 0;
                                    me.delayMicrostopTimeStart = new Date(0);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateDelayShift">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Things["BayerDBDataProvider"].UpdateDelayShift({id: id, delayShift: delayShift});
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="ProductionDelayed"
                 name="OnProductionDelayed"
                 source=""
                 sourceProperty=""
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnProductionDelayed">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.InsertDelayEntry({
                                            category: eventData.category, /* STRING */
                                            startTime: eventData.startTime,
                                            endTime: eventData.endTime, /* DATETIME */
                                            totalDuration: eventData.totalDuration,
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="Timer"
                 name="OnProductionDelayTimerTickChanged"
                 source="BayerDelayManagamentTimer"
                 sourceProperty=""
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnProductionDelayTimerTickChanged">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.ProcessChangeoverDelayRules({
                                        	eventData: eventData
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="DataChange"
                 name="OnProductionRunningChanged"
                 source=""
                 sourceProperty="productionRunning"
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnProductionRunningChanged">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.ProcessProductionDelayRules({eventData: eventData});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
            </Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="Bayer:PerformanceDashboard"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="changeoverDelayStartTime"></AlertDefinitions>
                <AlertDefinitions
                 name="changeoverStartTime"></AlertDefinitions>
                <AlertDefinitions
                 name="delayBreakDownTimeMoreThan"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopCount"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopCountMax"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopTime"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopTimeLessThan"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopTimeMax"></AlertDefinitions>
                <AlertDefinitions
                 name="delayMicrostopTimeStart"></AlertDefinitions>
                <AlertDefinitions
                 name="productionRunning"></AlertDefinitions>
            </AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="UpdateDelayShift">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ResetMicrostopDelayProperties">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="BayerSchedulerUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ChangeoverDelayedOver">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetDelayShiftDetails">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="periodMicrostop">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="changeoverStartTime">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="delayMicrostopTimeStart">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="changeoverDelayStartTime">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ProcessChangeoverDelayRules">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="InsertDelayEntry">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="InsertShiftEventEntry">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="overloadDelayStartTime">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="productionRunning">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerProductionDbSchedulerUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="countMicrostop">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="UpdateShift">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetDelaysSummary">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="activeShiftId">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="maxCountMicrostops">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="maxPeriodMicrostops">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ProcessEventsOnShiftChange">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerSchedulerUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="delayMicrostopCount">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="delayMicrostopTime">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerDelaysSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
