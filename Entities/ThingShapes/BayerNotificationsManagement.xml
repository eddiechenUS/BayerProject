<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2319"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1041"
 universal="">
    <ThingShapes>
        <ThingShape
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2019-11-18T16:09:43.750Z"
         name="BayerNotificationsManagement"
         projectName="BayerIoT"
         tags="Applications:Bayer">
            <PropertyDefinitions>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeThreshold="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="0"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 aspect.maximumValue="3"
                 aspect.minimumValue="0"
                 baseType="INTEGER"
                 category=""
                 description="0 - no alert&#xA;1 - blank&#xA;2 - changeover duration more than 110% target&#xA;3 - changeover duration more than 120% target"
                 isLocalOnly="false"
                 name="changeoverAlertLevel"
                 ordinal="5"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isPersistent="true"
                 baseType="BOOLEAN"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="changeoverComingNotificationSent"
                 ordinal="7"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.dataShape="GenericStringList"
                 aspect.defaultValue="{&quot;rows&quot;:[],&quot;dataShape&quot;:{&quot;fieldDefinitions&quot;:{&quot;item&quot;:{&quot;name&quot;:&quot;item&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:true},&quot;description&quot;:&quot;Item&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:0}}}}"
                 aspect.isPersistent="true"
                 baseType="INFOTABLE"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="notificationTargetGroupA"
                 ordinal="8"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.dataShape="GenericStringList"
                 aspect.defaultValue="{&quot;rows&quot;:[],&quot;dataShape&quot;:{&quot;fieldDefinitions&quot;:{&quot;item&quot;:{&quot;name&quot;:&quot;item&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:true},&quot;description&quot;:&quot;Item&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:0}}}}"
                 aspect.isPersistent="true"
                 baseType="INFOTABLE"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="notificationTargetGroupB"
                 ordinal="9"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeThreshold="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.defaultValue="0"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 aspect.maximumValue="3"
                 aspect.minimumValue="0"
                 baseType="INTEGER"
                 category=""
                 description="0 - no alert&#xA;1 - no production for last 5 min&#xA;2 - no production for last 10 min&#xA;3 - no production for last 30 min"
                 isLocalOnly="false"
                 name="productionAlertLevel"
                 ordinal="4"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="smsSenderAddress"
                 ordinal="1"></PropertyDefinition>
            </PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessNotificationRules">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="TimerEvent"
                         aspect.isRequired="true"
                         baseType="INFOTABLE"
                         description=""
                         name="eventData"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ResetNotifications">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SendChangeoverAlertMessage">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="INTEGER"
                         description=""
                         name="level"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SendChangeoverComingMessage">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="BayerScheduleItemDbDataShape"
                         aspect.isRequired="true"
                         baseType="INFOTABLE"
                         description=""
                         name="changeoverData"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SendProductionAlertMessage">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="INTEGER"
                         description=""
                         name="level"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions>
                <EventDefinition
                 category=""
                 dataShape="BayerScheduleItemDbDataShape"
                 description=""
                 name="ChangeoverComing"></EventDefinition>
            </EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessNotificationRules">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var covAlertLevel = 0;
                                    var prodAlertLevel = 0;
                                    
                                    // result: INFOTABLE dataShape: BayerProductionPlanDataShape
                                    var currentProduct = me.GetCurrentProduct();
                                    
                                    if (currentProduct && currentProduct.getRowCount() > 0) {
                                        if (currentProduct.productId === "Cambio") {
                                            try {
                                                // Test if changeover time exceeded
                                    
                                                var targetMinutes = currentProduct.targetHours * 60; 
                                                var difference = dateDifference(eventData.timestamp, currentProduct.startTime) / 1000 / 60;
                                    
                                                // Bayer wants to be able to exceed the target by 10%      
                                                var ratio = difference / targetMinutes;
                                    
                                                if (ratio > 1.2) {
                                                    covAlertLevel = 3;
                                                }
                                                else if (ratio > 1.1) {
                                                    covAlertLevel = 2;
                                                }
                                            }
                                            catch (ex) {
                                                logger.error(me.name + ".ProcessNotificationRules error validating changeover time: " + ex);
                                            }
                                        }
                                        else {
                                            try {
                                                // Test if no production active
                                                
                                                var counterTimestamp = me.GetPropertyTime({propertyName: "counter"});
                                    
                                    
                                                var productionTime = dateDifference(eventData.timestamp, currentProduct.startTime) / 1000 / 60;
                                                var counterUpdateTime = dateDifference(eventData.timestamp, counterTimestamp) / 1000 / 60;
                                    
                                                if (productionTime > 60 && counterUpdateTime > 60) {
                                                    prodAlertLevel = 3;
                                                }
                                                else if (productionTime > 30 && counterUpdateTime > 30) {
                                                    prodAlertLevel = 2;
                                                }
                                            }
                                            catch (ex) {
                                                logger.error(me.name + ".ProcessNotificationRules error validating production time: " + ex);
                                            }
                                            
                                            try {
                                                // Test if changeover coming in 30 min
                                                if (!me.changeoverComingNotificationSent) {
                                                    var nearestChangeover = me.GetNearestChangeoverFromSchedule({ fromTime: eventData.timestamp });
                                                    
                                                    if (nearestChangeover && nearestChangeover.getRowCount() > 0) {
                                                    	var timeToNearestChangeover = dateDifference(nearestChangeover.time, eventData.timestamp) / 1000 / 60;
                                                        if (timeToNearestChangeover <= 30) {
                                                            me.changeoverComingNotificationSent = true;
                                                            me.ChangeoverComing({
                                                                duration: nearestChangeover.duration /* INTEGER */,
                                                                productionPlanId: nearestChangeover.productionPlanId /* INTEGER */,
                                                                productionPlanId_actual: nearestChangeover.productionPlanId_actual /* INTEGER */,
                                                                hour: nearestChangeover.hour /* INTEGER */,
                                                                quantityTargetOk: nearestChangeover.quantityTargetOk /* BOOLEAN */,
                                                                id: nearestChangeover.id /* LONG */,
                                                                time: nearestChangeover.time /* DATETIME */,
                                                                quantityProduced: nearestChangeover.quantityProduced /* NUMBER */,
                                                                scheduleId: nearestChangeover.scheduleId /* INTEGER */,
                                                                targetQuantity: nearestChangeover.targetQuantity /* NUMBER */
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                            catch (ex)
                                            {
                                                logger.error(me.name + ".ProcessNotificationRules error validating incoming changeover: " + ex);
                                            }
                                        }
                                    }
                                    
                                    me.changeoverAlertLevel = covAlertLevel;
                                    me.productionAlertLevel = prodAlertLevel;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ResetNotifications">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    me.changeoverAlertLevel = 0;
                                    me.changeoverComingNotificationSent = false;
                                    me.productionAlertLevel = 0;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SendChangeoverAlertMessage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var body = "Changeover target exceeded for " + me.name + ". ";
                                    
                                    var recipients = me.notificationTargetGroupB;
                                    
                                    if (me.smsSenderAddress && recipients && recipients.getRowCount() > 0) {
                                        // result: INFOTABLE dataShape: BayerProductionPlanDataShape
                                        var current = me.GetCurrentProduct();
                                        
                                        if (current && current.getRowCount() > 0) {
                                    //        var params = {
                                    //            oldestFirst: true /* BOOLEAN */,
                                    //            maxItems: undefined /* NUMBER */,
                                    //            sourceTags: undefined /* TAGS */,
                                    //            endDate: undefined /* DATETIME */,
                                    //            query: undefined /* QUERY */,
                                    //            source: me.name /* STRING */,
                                    //            startDate: current.startTime /* DATETIME */,
                                    //            tags: undefined /* TAGS */
                                    //        };
                                    //
                                    //        // result: INFOTABLE
                                    //        var issues = Things["BayerIssues"].QueryStreamEntriesWithData(params);
                                    //
                                    //        var tableLength = issues.rows.length;
                                    //
                                    //        if (tableLength>0) {
                                    //            body += " Issues: ";
                                    //        }
                                    //
                                    //        for (var x = 0; x < tableLength; x++) {
                                    //            var row = issues.rows[x];
                                    //
                                    //            body += "(" + (x+1) + ") " + dateFormat(row.timestamp, "") + " " + row.category + " ";
                                    //
                                    //        }
                                    //
                                            var tableLength = recipients.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = recipients.rows[x];
                                                logger.debug("Sending email notification to " + row.item + ". BODY: " + body);
                                    
                                                try {
                                                    var params = {
                                                        cc: undefined /* STRING */,
                                                        bcc: undefined /* STRING */,
                                                        subject: body /* STRING */,
                                                        from: me.smsSenderAddress /* STRING */,
                                                        to: row.item /* STRING */,
                                                        body: "" /* HTML */
                                                    };
                                    
                                                    // no return
                                                    Things["BayerMailServer"].SendMessage(params);
                                                }
                                                catch (ex) {
                                                    logger.error(me.name + ".SendChangeoverAlertMessage error sending email to " + row.item + ". " + ex);
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        logger.warn(me.name + ".SendChangeoverAlertMessage - no sender/recipient provided");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SendChangeoverComingMessage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var body = "Changeover in 30 minutes at " + me.name + ". ";
                                    
                                    var recipients = me.notificationTargetGroupA;
                                    
                                    if (me.smsSenderAddress && recipients && recipients.getRowCount() > 0) {
                                        var tableLength = recipients.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = recipients.rows[x];
                                            logger.debug("Sending email notification to " + row.item + ". BODY: " + body);
                                    
                                            try {
                                                var params = {
                                                    cc: undefined /* STRING */,
                                                    bcc: undefined /* STRING */,
                                                    subject: body /* STRING */,
                                                    from: me.smsSenderAddress /* STRING */,
                                                    to: row.item /* STRING */,
                                                    body: "" /* HTML */
                                                };
                                    
                                                // no return
                                                Things["BayerMailServer"].SendMessage(params);
                                            }
                                            catch (ex) {
                                                logger.error(me.name + ".SendChangeoverComingMessage error sending email to " + row.item + ". " + ex);
                                            }
                                        }
                                    }
                                    else {
                                        logger.warn(me.name + ".SendChangeoverComingMessage - no sender/recipient provided");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SendProductionAlertMessage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var body = "No production at " + me.name + ". ";
                                    var recipients;
                                    
                                    if (level == 3) {
                                        recipients = me.notificationTargetGroupB;
                                        body += "No production recorded for last 60 minutes.";
                                        //startDate = dateAddMinutes(startDate, -30);
                                    }
                                    else if (level == 2) {
                                        recipients = me.notificationTargetGroupA;
                                        body += "No production recorded for last 30 minutes.";
                                        //startDate = dateAddMinutes(startDate, -10);
                                    }
                                    
                                    if (me.smsSenderAddress && recipients && recipients.getRowCount() > 0) {
                                    //    var params = {
                                    //        oldestFirst: true /* BOOLEAN */,
                                    //        maxItems: undefined /* NUMBER */,
                                    //        sourceTags: undefined /* TAGS */,
                                    //        endDate: undefined /* DATETIME */,
                                    //        query: undefined /* QUERY */,
                                    //        source: me.name /* STRING */,
                                    //        startDate: startDate /* DATETIME */,
                                    //        tags: undefined /* TAGS */
                                    //    };
                                    //
                                    //    // result: INFOTABLE
                                    //    var issues = Things["BayerIssues"].QueryStreamEntriesWithData(params);
                                    //
                                    //    var tableLength = issues.rows.length;
                                    //
                                    //    if (tableLength>0) {
                                    //        body += " Issues: ";
                                    //    }
                                    //
                                    //    for (var x = 0; x < tableLength; x++) {
                                    //        var row = issues.rows[x];
                                    //
                                    //        body += "(" + (x+1) + ") " + dateFormat(row.timestamp, "") + " " + row.category + " ";
                                    //
                                    //    }
                                    //
                                        var tableLength = recipients.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = recipients.rows[x];
                                            logger.debug("Sending email notification to " + row.item + ". BODY: " + body);
                                    
                                            try {
                                                var params = {
                                                    cc: undefined /* STRING */,
                                                    bcc: undefined /* STRING */,
                                                    subject: body /* STRING */,
                                                    from: me.smsSenderAddress /* STRING */,
                                                    to: row.item /* STRING */,
                                                    body: "" /* HTML */
                                                };
                                    
                                                // no return
                                                Things["BayerMailServer"].SendMessage(params);
                                            }
                                            catch (ex) {
                                                logger.error(me.name + ".SendProductionAlertMessage error sending email to " + row.item + ". " + ex);
                                            }
                                        }
                                    }
                                    else {
                                        logger.warn(me.name + ".SendProductionAlertMessage - no sender/recipient provided");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="DataChange"
                 name="OnChangeoverAlertLevelChange"
                 source=""
                 sourceProperty="changeoverAlertLevel"
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnChangeoverAlertLevelChange">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (eventData.newValue.value > 1) {
                                            logger.debug(me.name + ".ChangeoverAlertRaisedNotification fired");
                                            
                                            var params = {
                                                level: eventData.newValue.value /* INTEGER */
                                            };
                                        
                                            me.SendChangeoverAlertMessage(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="ChangeoverComing"
                 name="OnChangeoverComing"
                 source=""
                 sourceProperty=""
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnChangeoverComing">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.SendChangeoverComingMessage({
                                        	changeoverData: eventData /* INFOTABLE */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="Timer"
                 name="OnNotificationTimerTick"
                 source="BayerNotificationSystemTimer"
                 sourceProperty=""
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnNotificationTimerTick">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                            me.ProcessNotificationRules({
                                                eventData: eventData /* INFOTABLE */
                                            });
                                        }
                                        catch (ex) {
                                            logger.error(me.name + ".NotificationTimerTick subscription. Error: " + ex);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="DataChange"
                 name="OnProductionAlertLevelChanged"
                 source=""
                 sourceProperty="productionAlertLevel"
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnProductionAlertLevelChanged">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (eventData.newValue.value > 0) {
                                            var params = {
                                                level: eventData.newValue.value /* INTEGER */
                                            };
                                        
                                            me.SendProductionAlertMessage(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
            </Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="Bayer:PerformanceDashboard"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="changeoverAlertLevel"></AlertDefinitions>
                <AlertDefinitions
                 name="changeoverComingNotificationSent"></AlertDefinitions>
                <AlertDefinitions
                 name="notificationTargetGroupA"></AlertDefinitions>
                <AlertDefinitions
                 name="notificationTargetGroupB"></AlertDefinitions>
                <AlertDefinitions
                 name="productionAlertLevel"></AlertDefinitions>
                <AlertDefinitions
                 name="smsSenderAddress"></AlertDefinitions>
            </AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="changeoverComingNotificationSent">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ProcessNotificationRules">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="SendChangeoverComingMessage">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ResetNotifications">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="SendChangeoverAlertMessage">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="productionAlertLevel">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="changeoverAlertLevel">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="SendProductionAlertMessage">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="BayerNotificationSystemUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
