<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2020-08-05T17:39:55.380Z"
         name="BayerAdministrationThing"
         projectName="BayerIoT"
         published="false"
         tags="Applications:Bayer"
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetRuntimePermissions">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetVisibilityPermissions">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetRuntimePermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        ThingTemplates["BrowserGateway"].AddInstanceRunTimePermission({
                                        	principal: 'System' /* STRING */,
                                        	allow: true /* BOOLEAN */,
                                        	resource: '*' /* STRING */,
                                        	type: 'ServiceInvoke' /* STRING */,
                                        	principalType: 'User' /* STRING */
                                        });
                                        
                                        Resources["TTPSC.Utilities.UtilityServices"].AddRunTimePermission({
                                        	principal: 'System' /* STRING */,
                                        	allow: true /* BOOLEAN */,
                                        	resource: 'ParseCSV' /* STRING */,
                                        	type: 'ServiceInvoke' /* STRING */,
                                        	principalType: 'User' /* STRING */
                                        });
                                        //>----------------------------------------------------------------------------
                                        
                                        var entityTypes = [
                                        	//	'StyleTheme',
                                        	//	'Thing',
                                        	//	'Mashup',
                                        	//	'MediaEntity',
                                        	//	'StyleDefinition',
                                        	//	'DataShape',
                                        	'Resource',
                                        	//	'LocalizationTable',
                                        	//	'Subsystem',
                                        	//	'StateDefinition',
                                        	//	'ThingTemplate',
                                        	//	'ThingShape'
                                        ]; //! entity types
                                        
                                        var principalAllowInfo = {
                                        	allow: true,
                                        	principalType: "Group",
                                        	principal: "App.BayerPerformanceDashboard",
                                        	resource: "*",
                                        	type: "ServiceInvoke"
                                        };
                                        
                                        //* Design Time Permissions (Read)
                                        [
                                        	"StyleTheme",
                                        	"Mashup",
                                        	"DataShape"
                                        ].forEach(entityType => {
                                        	let entities = Resources["EntityServices"].GetEntityList({
                                        		maxItems: 10000 /* NUMBER */,
                                        		nameMask: undefined /* STRING */,
                                        		type: entityType /* STRING */,
                                        		tags: undefined /* TAGS */
                                        	});
                                        	let numEntities = entities.rows.length;
                                        	for (let mIdx = 0; mIdx < numEntities; mIdx++) {
                                        		let entityName = entities.rows[mIdx].name;
                                        		let entity = getEntity(entityName, entityType);
                                        		entity.AddDesignTimePermission({
                                        			allow: true,
                                        			principalType: principalAllowInfo.principalType,
                                        			principal: principalAllowInfo.principal,
                                        			type: "Read"
                                        		});
                                        	} //# for each entity
                                        }); //> Mashup, StyleTheme, ... (Design Time)
                                        //>----------------------------------------------------------------------------
                                        
                                        //* Single Entity Targets (customized)
                                        var targets = {
                                        	"Subsystems/PlatformSubsystem": {
                                        		"ServiceInvoke": [
                                        			"GetAllStyleDefinitions",
                                        			"GetAllStateDefinitions",
                                        			"GetAllStyleThemes"
                                        		]
                                        	},
                                        	"Resources/RuntimeLocalizationFunctions": {
                                        		"ServiceInvoke": [
                                        			"GetEffectiveTokens",
                                        			"GetEffectiveToken"
                                        		]
                                        	},
                                        	"Resources/CurrentSessionInfo": {
                                        		"ServiceInvoke": [
                                        			"GetCurrentUser",
                                        			"SetGlobalSessionStringValue",
                                        			"SetGlobalSessionDateTimeValue",
                                        			"GetGlobalSessionValues",
                                        			"GetCurrentUserExtensionProperties"
                                        		]
                                        	},
                                        	"Resources/InfoTableFunctions": {
                                        		"ServiceInvoke": ["*"]
                                        	},
                                        	"Resources/EntityServices": {
                                        		"ServiceInvoke": [
                                        			"GetClientApplicationKey"
                                        		]
                                        	}
                                        };
                                        
                                        Object.keys(targets).forEach(target => {
                                        	let [entityType, entityName] = target.split("/");
                                        	let entity = getEntity(entityName, entityType);
                                        	let permissions = targets[target];
                                        	for (let permissionType in permissions) {
                                        		let resources = permissions[permissionType];
                                        		let numResources = resources.length;
                                        		for (let rIdx = 0; rIdx < numResources; rIdx++) {
                                        			let resource = resources[rIdx];
                                        			let allowParams = {
                                        				allow: true,
                                        				principalType: principalAllowInfo.principalType,
                                        				principal: principalAllowInfo.principal,
                                        				resource: resource, // can be "*"
                                        				type: permissionType // ServiceInvoke? PropertyRead?
                                        			};
                                        			entity.AddRunTimePermission(allowParams);
                                        		} //# for each resource
                                        	} //# for each target permission type 
                                        }); //# for each target entity
                                        //>----------------------------------------------------------------------------
                                        
                                        function getEntity(name, type) {
                                        	if (type.startsWith('Thing')) {
                                        		return Things[name];
                                        	} else if (type.startsWith('Mashup')) {
                                        		return Mashups[name];
                                        	} else if (type.startsWith('MediaEntity')) {
                                        		return MediaEntities[name];
                                        	} else if (type.startsWith('StyleDefinition')) {
                                        		return StyleDefinitions[name];
                                        	} else if (type.startsWith('DataShape')) {
                                        		return DataShapes[name];
                                        	} else if (type.startsWith('Resource')) {
                                        		return Resources[name];
                                        	} else if (type.startsWith('LocalizationTable')) {
                                        		return LocalizationTables[name];
                                        	} else if (type.startsWith('Subsystem')) {
                                        		return Subsystems[name];
                                        	} else if (type.startsWith('StateDefinition')) {
                                        		return StateDefinitions[name];
                                        	} else if (type.startsWith('ThingTemplate')) {
                                        		return ThingTemplates[name];
                                        	} else if (type.startsWith('ThingShape')) {
                                        		return ThingShapes[name];
                                        	} else if (type.startsWith('StyleTheme')) {
                                        		return StyleThemes[name];
                                        	}
                                        	return undefined;
                                        } //> getEntity(...)
                                        //>----------------------------------------------------------------------------
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetVisibilityPermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var entityTypes = ['StyleTheme', 'Thing', 'Mashup', 'MediaEntity', 'StyleDefinition', 'DataShape', 'Resource', 'LocalizationTable', 'Subsystem', 'StateDefinition', 'ThingTemplate', 'ThingShape'];
                                        
                                        var paramsForVisibility = {
                                            principal: 'Bayer:PerformanceDashboard' /* STRING */,
                                            principalType: 'OrganizationalUnit' /* STRING */
                                        };
                                        
                                        for (var x = 0; x < entityTypes.length; x++) {
                                            var type = entityTypes[x];
                                            
                                        	var params = {
                                                maxItems: 999999999 /* NUMBER */,
                                                nameMask: undefined /* STRING */,
                                                type: type /* STRING */,
                                                tags: undefined /* TAGS */
                                            };
                                        
                                            // result: INFOTABLE dataShape: RootEntityList
                                            var entities = Resources["EntityServices"].GetEntityList(params);
                                        
                                            for (var y = 0; y < entities.rows.length; y++) {
                                                var row = entities.rows[y];
                                                if (row.isSystemObject || type == 'Subsystem') {
                                                    var entity;
                                                    
                                                    if (type == 'Thing') {
                                                        entity = Things[row.name];
                                                    }
                                                    else if (type == 'Mashup') {
                                                        entity = Mashups[row.name];
                                                    }
                                                    else if (type == 'MediaEntity') {
                                                        entity = MediaEntities[row.name];
                                                    }
                                                    else if (type == 'StyleDefinition') {
                                                        entity = StyleDefinitions[row.name];
                                                    }
                                                    else if (type == 'DataShape') {
                                                        entity = DataShapes[row.name];
                                                    }
                                                    else if (type == 'Resource') {
                                                        entity = Resources[row.name];                
                                                    }
                                                    else if (type == 'LocalizationTable') {
                                                        entity = LocalizationTables[row.name];
                                                    }
                                                    else if (type == 'Subsystem') {
                                                        entity = Subsystems[row.name];
                                                    }
                                                    else if (type == 'StateDefinition') {
                                                        entity = StateDefinitions[row.name];
                                                    }
                                                    else if (type == 'ThingTemplate') {
                                                        entity = ThingTemplates[row.name];
                                                    }
                                                    else if (type == 'ThingShape') {
                                                        entity = ThingShapes[row.name];
                                                    }
                                        
                                                    try {
                                                        // no return
                                                        entity.AddVisibilityPermission(paramsForVisibility);
                                                    }
                                                    catch (ex) {
                                                        logger.error("AddVisibilityToSystemObjects [" + row.name + "] " + ex);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        
                                        /////////////// ADVANCED TREE GRID ////////////////////
                                        //MediaEntities["GridRowIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowExpansionIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortDescendingArrow"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowCollapseIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortAscendingArrow"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowExpansionIconNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortDescendingArrowNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowCollapseIconNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortAscendingArrowNav"].AddVisibilityPermission(paramsForVisibility);
                                        Resources["TTPSC.Utilities.UtilityServices"].AddVisibilityPermission(paramsForVisibility);
                                        PersistenceProviders["ThingworxPersistenceProvider"].AddVisibilityPermission(paramsForVisibility);
                                        Resources["PDFExport"].AddVisibilityPermission(paramsForVisibility);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
