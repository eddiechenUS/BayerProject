<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2319"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1041"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2019-10-31T09:03:40.536Z"
         name="BayerDelaysDetailsPage"
         projectName="BayerIoT"
         published="false"
         tags="Applications:Bayer"
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetRowNumById">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetMachineState">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="Bayer:PerformanceDashboard"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMachineState">
                        <ResultType
                         aspect.dataShape="DelaysDetailsMaschineStateDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="0"
                             aspect.isRequired="true"
                             baseType="INTEGER"
                             description=""
                             name="shiftId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="BayerShiftSchedulesDataShape"
                             aspect.isRequired="true"
                             baseType="INFOTABLE"
                             description=""
                             name="shiftSchedules"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRowNumById">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="0"
                             aspect.isRequired="true"
                             baseType="INTEGER"
                             description=""
                             name="shiftId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="BayerShiftSchedulesDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="shiftSchedules"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMachineState">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var events = Things["BayerDBDataProvider"].GetShiftEvents({
                                        	shiftScheduleId: shiftId /* INTEGER */
                                        });
                                        
                                        var isProduced = false;
                                        var shift = 28800000; //ms = 8h
                                        var now = new Date();
                                        var shiftStartTime = new Date(0);
                                        var shiftLeft = shift;
                                        
                                        
                                        isProduced = (shiftSchedules.totalQuantityProduced > 0);
                                        shiftStartTime = shiftSchedules.timestamp;
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(DelaysDetailsMaschineStateDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName : "InfoTable",
                                            dataShapeName : "DelaysDetailsMaschineStateDataShape"
                                        });
                                        
                                        if (events.getRowCount() > 0) {
                                            var tableLength = events.rows.length;
                                            var lastEventTime = new Date();
                                            var lastEventCategory = '';
                                            for (var x=0; x < tableLength; x++) {
                                                var event = events.rows[x];
                                                var time = event.startTime;
                                                var duration = event.durationMs;
                                                //if event starts in prev shift
                                                if (event.startTime.getTime() <= shiftStartTime.getTime()) {
                                                    time = shiftStartTime;
                                                    duration = dateDifference(event.endTime, shiftStartTime);
                                                } else {
                                                	if (x === 0 && event.category !== 'runing') {
                                                        duration = dateDifference(event.startTime, shiftStartTime); 
                                                        var startShift = new Object();
                                                        startShift.duration = duration;
                                                        startShift.sectionColorState = 'running'; // STRING
                                                        startShift.time = shiftStartTime; // DATETIME
                                                        result.AddRow(startShift);
                                                        
                                                        shiftLeft-= duration;
                                                        duration = event.durationMs;
                                                    }
                                                }
                                               
                                                event.time = time;
                                                event.duration = duration;
                                                result.AddRow(event);
                                               	
                                                shiftLeft-= duration;
                                                lastEventTime = event.endTime;
                                                lastEventCategory = event.category;
                                            }
                                           	
                                           
                                            var endShift = new Object();
                                            endShift.time = lastEventTime; // DATETIME
                                            if (lastEventCategory === 'running') {
                                                endShift.sectionColorState = 'gap';
                                            } else {
                                                if (lastEventTime.getTime() + shiftLeft <= now.getTime()) {
                                                	endShift.sectionColorState = 'running'; // STRING
                                                } else {
                                                    endShift.sectionColorState = 'gap';
                                                }
                                            }
                                            endShift.duration = shiftLeft;
                                            result.AddRow(endShift);
                                        } else if (isProduced === true) {
                                        	var shiftDuration = shift;
                                            var diff = dateDifference(new Date(), shiftStartTime); 
                                            if (diff <= shift) {
                                                shiftDuration = diff;
                                            }
                                            var day = new Object();
                                            day.duration = shiftDuration; 
                                            day.sectionColorState = 'running'; // STRING
                                            day.time = shiftStartTime; // DATETIME
                                            result.AddRow(day);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRowNumById">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var tableLength = shiftSchedules.rows.length;
                                        
                                        var result = -1;
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = shiftSchedules.rows[x];
                                        	
                                            if (row.id === shiftId) {
                                                result = x;
                                                break;
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
