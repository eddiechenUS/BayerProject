<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities build="b222" majorVersion="8" minorVersion="5" modelPersistenceProviderPackage="PostgresPersistenceProviderPackage" revision="4" schemaVersion="1053" universal="">
    <ThingTemplates>
        <ThingTemplate baseThingTemplate="BayerDataProviderTemplate" description="" documentationContent="" effectiveThingPackage="ConfiguredThing" homeMashup="" lastModifiedDate="2020-03-20T09:25:34.993Z" name="BayerProductionDBDataProviderTemplate" projectName="BayerIoT" tags="Applications:Bayer" thingPackage="" valueStream="">
            <avatar/>
            <DesignTimePermissions>
                <Create/>
                <Read/>
                <Update/>
                <Delete/>
                <Metadata/>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions resourceName="*">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal isPermitted="true" name="Bayer:PerformanceDashboard" type="OrganizationalUnit"/>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions/>
            <ConfigurationTables>
                <ConfigurationTable description="" isMultiRow="false" name="Connector" ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition aspect.isPrimaryKey="true" baseType="THINGNAME" description="" name="connector" ordinal="1"/>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <connector>
                            <![CDATA[
                            BayerGrenzach37ProductionDBConnector
                            ]]>
                            </connector>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <PropertyBindings/>
            <RemotePropertyBindings/>
            <RemoteServiceBindings/>
            <RemoteEventBindings/>
            <AlertConfigurations>
                <AlertDefinitions name="factor"/>
                <AlertDefinitions name="mockCounterData"/>
                <AlertDefinitions name="mockedValue"/>
            </AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="STRING" category="" description="" isLocalOnly="false" name="factor" ordinal="4"/>
                    <PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.defaultValue="false" aspect.isPersistent="true" baseType="BOOLEAN" category="" description="" isLocalOnly="false" name="mockCounterData" ordinal="2"/>
                    <PropertyDefinition aspect.cacheTime="0.0" aspect.dataChangeType="VALUE" aspect.isPersistent="true" baseType="INTEGER" category="" description="" isLocalOnly="false" name="mockedValue" ordinal="3"/>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetCurrentCounterValue">
                        <ResultType baseType="NUMBER" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions/>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="true" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetCurrentCounterValueFromDB">
                        <ResultType baseType="STRING" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions>
                            <FieldDefinition baseType="STRING" description="" name="connector" ordinal="2"/>
                            <FieldDefinition baseType="STRING" description="" name="factor" ordinal="1"/>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition aspect.isAsync="false" category="" description="" isAllowOverride="false" isLocalOnly="false" isOpen="false" isPrivate="false" name="GetSensorStatusValueFromDB">
                        <ResultType baseType="STRING" description="" name="result" ordinal="0"/>
                        <ParameterDefinitions/>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions/>
                <ServiceMappings/>
                <ServiceImplementations>
                    <ServiceImplementation description="" handlerName="Script" name="GetCurrentCounterValue">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = me.mockCounterData ? me.mockedValue : Things[me.GetConnector()].GetCurrentCounterValue().ValueNumber;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetCurrentCounterValueFromDB">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        factor = me.factor;
                                        connector =me.GetConnector();
                                        var sensorVal=  Things[connector].GetSensorID()["ValueNumber"];
                                          //  me.valuetext=test;
                                            var lookupVal=  Things[connector].GetValueNumber()["ProductName"];
                                          //  me.machineID = test1;
                                        
                                            
                                             
                                          var factorVal=Things[connector].GetFactorValue({value:lookupVal,factor: factor})[factor];
                                         
                                        var result =sensorVal * factorVal;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation description="" handlerName="Script" name="GetSensorStatusValueFromDB">
                        <ConfigurationTables>
                            <ConfigurationTable description="" isMultiRow="false" name="Script" ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition baseType="STRING" description="code" name="code" ordinal="0"/>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var val = Things[me.GetConnector()].GetSensorStatusDB()["ValueNumber"];
                                        
                                        var result = val;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions/>
            </ThingShape>
            <ImplementedShapes/>
            <SharedConfigurationTables/>
            <InstanceDesignTimePermissions>
                <Create/>
                <Read/>
                <Update/>
                <Delete/>
                <Metadata/>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions>
                <Permissions resourceName="GetCurrentCounterValue">
                    <PropertyRead/>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke/>
                    <EventSubscribe/>
                </Permissions>
                <Permissions resourceName="*">
                    <PropertyRead>
                        <Principal isPermitted="true" name="System" type="User"/>
                    </PropertyRead>
                    <PropertyWrite/>
                    <ServiceInvoke>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal isPermitted="true" name="BayerProductionDbSchedulerUser" type="User"/>
                    </EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility>
                    <Principal isPermitted="true" name="Bayer:PerformanceDashboard" type="OrganizationalUnit"/>
                </Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
