<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b222"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1053"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2021-02-23T04:55:09.473Z"
         name="BayerAdministrationThing"
         projectName="BayerIoT"
         published="false"
         tags="Applications:Bayer"
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="Return the list of entities with corresponding visibility permissions"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetVisibilityPermissionsForProjectEntities">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="entityType"
                             ordinal="0"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetRuntimePermissions">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetVisibilityPermissions">
                        <ResultType
                         aspect.dataShape="EntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="simulate"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description="Return the list of entities with corresponding visibility permissions"
                     handlerName="Script"
                     name="GetVisibilityPermissionsForProjectEntities">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //
                                        // GetVisiblityPermissionsForProjectEntities
                                        //
                                        
                                        var outputList = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "result",
                                            dataShapeName: "EntityList"
                                        });
                                        
                                        /*var entityTypes = [
                                            'Thing',
                                            'ThingTemplate',
                                            'ThingShape',
                                            'DataShape',
                                            'Mashup',
                                            'Resource',
                                            'StyleDefinition',
                                            'StateDefinition',
                                            'MediaEntity',
                                            'StyleTheme',
                                            'LocalizationTable'
                                        ];
                                        */
                                        
                                        var entityMapping = {
                                            'Thing': Things,
                                            'Things': Things,
                                            'ThingTemplate': ThingTemplates,
                                            'ThingTemplates': ThingTemplates,
                                            'ThingShape': ThingShapes,
                                            'ThingShapes': ThingShapes,
                                            'DataShape': DataShapes,
                                            'DataShapes': DataShapes,
                                            'Mashup': Mashups,
                                            'Mashups': Mashups,
                                            'Subsystem': Subsystems,
                                            'Subsystems': Subsystems,
                                            'Resource': Resources,
                                            'Resources': Resources,
                                            'StyleDefinition': StyleDefinitions,
                                            'StyleDefinitions': StyleDefinitions,
                                            'StateDefinition': StateDefinitions,
                                            'StateDefinitions': StateDefinitions,
                                            'MediaEntity': MediaEntities,
                                            'MediaEntities': MediaEntities,
                                            'StyleTheme': StyleThemes,
                                            'StyleThemes': StyleThemes,
                                            'LocalizationTable': LocalizationTables,
                                            'LocalizationTables': LocalizationTables
                                        };
                                        
                                        function getEntity(name, type) {
                                            var entities = entityMapping[type];
                                            if (!entities)
                                                return undefined;
                                            return entities[name]
                                        } //> getEntity(...)
                                        //>----------------------------------------------------------------------------
                                        
                                        var projectName = "BayerIoT"
                                        
                                        if (!entityType) {
                                            entityType = "Thing"; // default value
                                        }
                                        
                                        //* result: INFOTABLE dataShape: SpotlightSearch
                                        var searchResults = Resources["SearchFunctions"].SpotlightSearch({
                                            searchExpression: undefined, // STRING - Search expression
                                            tags: undefined, // TAGS - Tags
                                            types: { "items": [entityType] }, // JSON - Entity types
                                            thingTemplates: undefined, // JSON - Thing templates
                                            thingShapes: undefined, // JSON - Thing shapes
                                            aspects: undefined, // JSON - Aspects to match
                                            excludedAspects: undefined, // JSON - Aspects to exclude
                                            startDate: undefined, // DATETIME - Only return entities modified since this date
                                            endDate: undefined, // DATETIME - Only return entities modified before this date
                                            searchDescriptions: true, // BOOLEAN - Search descriptions in addition to names
                                            withPermissions: false, // BOOLEAN - Include user permissions
                                            sortBy: "name", // STRING - Sort mode
                                            isAscending: true, // BOOLEAN - Ascending search
                                            maxItems: 1000, // NUMBER - Maximum number of items to return
                                            maxSearchItems: 100000, // NUMBER - Maximum number of items to search
                                            projectName: projectName, // PROJECTNAME - Project Name
                                        });
                                        
                                        var extraColumnsCnt = 0;
                                        function applyExtraColumns(newCounter) {
                                            if (newCounter <= extraColumnsCnt)
                                                return;
                                            for (var _cnt = extraColumnsCnt + 1; _cnt <= newCounter; _cnt++) {
                                                outputList.AddField({
                                                    name: "permission_" + _cnt,
                                                    description: "",
                                                    baseType: "STRING",
                                                    ordinal: _cnt + 2
                                                });
                                                extraColumnsCnt++;
                                            }
                                        } //> applyExtraColumns(...)
                                        
                                        function applyPermissionsToRow(permissions, target) {
                                            if (!permissions || !permissions.Visibility || !target)
                                                return;
                                            if (typeof target != "object")
                                                return;
                                            var table = permissions.Visibility;
                                            if (!table.length)
                                                return;
                                            for (var _cnt = 0; _cnt < table.length; _cnt++) {
                                                var perm = table[_cnt];
                                                target["permission_" + (_cnt + 1)] = perm.type + "::" + perm.name + " -> " + (perm.isPermitted ? "YES" : "NO");
                                            } //# for each permission
                                        } //> applyPermissionsToRow(...)
                                        
                                        for (var _idx = 0; _idx < searchResults.rows.length; _idx++) {
                                            var itemInfo = searchResults.rows[_idx];
                                            var entity = getEntity(itemInfo.name, itemInfo.type);
                                            try {
                                                if (!entity.IsEnabled()) {
                                                    outputList.AddRow({ name: itemInfo.type + "." + itemInfo.name, description: "isEnabled: false" });
                                                    continue;
                                                }
                                            } catch (ex) { }
                                            var infoRow = { name: itemInfo.type + "." + itemInfo.name };
                                            var permissions = entity.GetVisibilityPermissionsAsJSON();
                                            applyExtraColumns(permissions.Visibility.length);
                                            applyPermissionsToRow(permissions, infoRow);
                                            outputList.AddRow(infoRow);
                                        } //# for each result row
                                        
                                        var result = outputList;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetRuntimePermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        ThingTemplates["BrowserGateway"].AddInstanceRunTimePermission({
                                        	principal: 'System' /* STRING */,
                                        	allow: true /* BOOLEAN */,
                                        	resource: '*' /* STRING */,
                                        	type: 'ServiceInvoke' /* STRING */,
                                        	principalType: 'User' /* STRING */
                                        });
                                        
                                        Resources["TTPSC.Utilities.UtilityServices"].AddRunTimePermission({
                                        	principal: 'System' /* STRING */,
                                        	allow: true /* BOOLEAN */,
                                        	resource: 'ParseCSV' /* STRING */,
                                        	type: 'ServiceInvoke' /* STRING */,
                                        	principalType: 'User' /* STRING */
                                        });
                                        //>----------------------------------------------------------------------------
                                        
                                        
                                        var entityMapping = {
                                        	'Thing': Things,
                                        	'Things': Things,
                                        	'ThingTemplate': ThingTemplates,
                                        	'ThingTemplates': ThingTemplates,
                                        	'ThingShape': ThingShapes,
                                        	'ThingShapes': ThingShapes,
                                        	'DataShape': DataShapes,
                                        	'DataShapes': DataShapes,
                                        	'Mashup': Mashups,
                                        	'Mashups': Mashups,
                                        	'Subsystem': Subsystems,
                                        	'Subsystems': Subsystems,
                                        	'Resource': Resources,
                                        	'Resources': Resources,
                                        	'StyleDefinition': StyleDefinitions,
                                        	'StyleDefinitions': StyleDefinitions,
                                        	'StateDefinition': StateDefinitions,
                                        	'StateDefinitions': StateDefinitions,
                                        	'MediaEntity': MediaEntities,
                                        	'MediaEntities': MediaEntities,
                                        	'StyleTheme': StyleThemes,
                                        	'StyleThemes': StyleThemes,
                                        	'LocalizationTable': LocalizationTables,
                                        	'LocalizationTables': LocalizationTables
                                        };
                                        
                                        var principalAllowInfo = {
                                        	allow: true,
                                        	principalType: "Group",
                                        	principal: "App.BayerPerformanceDashboard",
                                        	resource: "*",
                                        	type: "ServiceInvoke"
                                        };
                                        
                                        //* Design Time Permissions (Read)
                                        [
                                        	"StyleTheme",
                                        	"Mashup",
                                        	"DataShape"
                                        ].forEach(entityType => {
                                        	let entities = Resources["EntityServices"].GetEntityList({
                                        		maxItems: 10000 /* NUMBER */,
                                        		nameMask: undefined /* STRING */,
                                        		type: entityType /* STRING */,
                                        		tags: undefined /* TAGS */
                                        	});
                                        	let numEntities = entities.rows.length;
                                        	for (let mIdx = 0; mIdx < numEntities; mIdx++) {
                                        		let entityName = entities.rows[mIdx].name;
                                        		let entity = getEntity(entityName, entityType);
                                        		entity.AddDesignTimePermission({
                                        			allow: true,
                                        			principalType: principalAllowInfo.principalType,
                                        			principal: principalAllowInfo.principal,
                                        			type: "Read"
                                        		});
                                        		if (entityType == 'DataShape') {
                                        			entity.AddRunTimePermission({
                                        				allow: true,
                                        				principalType: principalAllowInfo.principalType,
                                        				principal: principalAllowInfo.principal,
                                        				type: "ServiceInvoke",
                                        				resource: "GetFieldDefinitions"
                                        			});
                                        		}
                                        	} //# for each entity
                                        }); //> Mashup, StyleTheme, ... (Design Time)
                                        //>----------------------------------------------------------------------------
                                        
                                        //* Single Entity Targets (customized)
                                        var targets = {
                                        	"Subsystems/PlatformSubsystem": {
                                        		"ServiceInvoke": [
                                        			"GetAllStyleDefinitions",
                                        			"GetAllStateDefinitions",
                                        			"GetAllStyleThemes"
                                        		]
                                        	},
                                        	"Resources/RuntimeLocalizationFunctions": {
                                        		"ServiceInvoke": [
                                        			"GetEffectiveTokens",
                                        			"GetEffectiveToken"
                                        		]
                                        	},
                                        	"Resources/CurrentSessionInfo": {
                                        		"ServiceInvoke": [
                                        			"GetCurrentUser",
                                        			"SetGlobalSessionStringValue",
                                        			"SetGlobalSessionDateTimeValue",
                                        			"GetGlobalSessionValues",
                                        			"GetCurrentUserExtensionProperties"
                                        		]
                                        	},
                                        	"Resources/InfoTableFunctions": {
                                        		"ServiceInvoke": ["*"]
                                        	},
                                        	"Resources/EntityServices": {
                                        		"ServiceInvoke": [
                                        			"GetClientApplicationKey"
                                        		]
                                        	}
                                        };
                                        
                                        Object.keys(targets).forEach(target => {
                                        	let [entityType, entityName] = target.split("/");
                                        	let entity = getEntity(entityName, entityType);
                                        	let permissions = targets[target];
                                        	for (let permissionType in permissions) {
                                        		let resources = permissions[permissionType];
                                        		let numResources = resources.length;
                                        		for (let rIdx = 0; rIdx < numResources; rIdx++) {
                                        			let resource = resources[rIdx];
                                        			let allowParams = {
                                        				allow: true,
                                        				principalType: principalAllowInfo.principalType,
                                        				principal: principalAllowInfo.principal,
                                        				resource: resource, // can be "*"
                                        				type: permissionType // ServiceInvoke? PropertyRead?
                                        			};
                                        			entity.AddRunTimePermission(allowParams);
                                        		} //# for each resource
                                        	} //# for each target permission type 
                                        }); //# for each target entity
                                        //>----------------------------------------------------------------------------
                                        
                                        function getEntity(name, type) {
                                        	var entities = entityMapping[type];
                                        	if (!entities)
                                        		return undefined;
                                        	return entities[name];
                                        } //> getEntity(...)
                                        //>----------------------------------------------------------------------------
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetVisibilityPermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //
                                        // SetVisibityPermissions service
                                        //* simulate - BOOLEAN
                                        
                                        var entityTypes = [
                                            'Thing',
                                            'ThingTemplate',
                                            'ThingShape',
                                            'DataShape',
                                            'Mashup',
                                            'Subsystem',
                                            'Resource',
                                            'StyleDefinition',
                                            'StateDefinition',
                                            'MediaEntity',
                                            'StyleTheme',
                                            'LocalizationTable'
                                        ];
                                        
                                        var entityMapping = {
                                            'Thing': Things,
                                            'Things': Things,
                                            'ThingTemplate': ThingTemplates,
                                            'ThingTemplates': ThingTemplates,
                                            'ThingShape': ThingShapes,
                                            'ThingShapes': ThingShapes,
                                            'DataShape': DataShapes,
                                            'DataShapes': DataShapes,
                                            'Mashup': Mashups,
                                            'Mashups': Mashups,
                                            'Subsystem': Subsystems,
                                            'Subsystems': Subsystems,
                                            'Resource': Resources,
                                            'Resources': Resources,
                                            'StyleDefinition': StyleDefinitions,
                                            'StyleDefinitions': StyleDefinitions,
                                            'StateDefinition': StateDefinitions,
                                            'StateDefinitions': StateDefinitions,
                                            'MediaEntity': MediaEntities,
                                            'MediaEntities': MediaEntities,
                                            'StyleTheme': StyleThemes,
                                            'StyleThemes': StyleThemes,
                                            'LocalizationTable': LocalizationTables,
                                            'LocalizationTables': LocalizationTables
                                        };
                                        
                                        function getEntity(name, type) {
                                            var entities = entityMapping[type];
                                            if (!entities)
                                                return undefined;
                                            return entities[name]
                                        } //> getEntity(...)
                                        //>----------------------------------------------------------------------------
                                        
                                        var affectedList = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "result",
                                            dataShapeName: "EntityList"
                                        });
                                        
                                        var paramsForVisibility = {
                                            principal: 'Bayer:PerformanceDashboard' /* STRING */,
                                            principalType: 'OrganizationalUnit' /* STRING */
                                        };
                                        
                                        function checkPermissions(permissions) {
                                            if (!permissions)
                                                return undefined;
                                            if (!permissions.Visibility)
                                                return undefined;
                                            if (typeof permissions.Visibility != "object")
                                                return undefined;
                                            if (!permissions.Visibility.length)
                                                return undefined;
                                            for (var _idx = 0; _idx < permissions.Visibility.length; _idx++) {
                                                var permission = permissions.Visibility[_idx];
                                                if (permission.name == paramsForVisibility.principal &&
                                                    permission.type == paramsForVisibility.principalType) {
                                                    return permission.isPermitted;
                                                }
                                            } //# for each permission
                                            return undefined;
                                        } //> checkPermissions(...)
                                        //>----------------------------------------------------------------------------
                                        
                                        function getEntityListForProject(entityType, projectName) {
                                            //* result: INFOTABLE dataShape: SpotlightSearch
                                            return Resources["SearchFunctions"].SpotlightSearch({
                                                searchExpression: undefined, // STRING - Search expression
                                                tags: undefined, // TAGS - Tags
                                                types: { "items": [entityType] }, // JSON - Entity types
                                                thingTemplates: undefined, // JSON - Thing templates
                                                thingShapes: undefined, // JSON - Thing shapes
                                                aspects: undefined, // JSON - Aspects to match
                                                excludedAspects: undefined, // JSON - Aspects to exclude
                                                startDate: undefined, // DATETIME - Only return entities modified since this date
                                                endDate: undefined, // DATETIME - Only return entities modified before this date
                                                searchDescriptions: true, // BOOLEAN - Search descriptions in addition to names
                                                withPermissions: false, // BOOLEAN - Include user permissions
                                                sortBy: "name", // STRING - Sort mode
                                                isAscending: true, // BOOLEAN - Ascending search
                                                maxItems: 1000, // NUMBER - Maximum number of items to return
                                                maxSearchItems: 100000, // NUMBER - Maximum number of items to search
                                                projectName: projectName, // PROJECTNAME - Project Name
                                            });
                                        } //> getEntityListForProject(...)
                                        //>----------------------------------------------------------------------------
                                        
                                        function applyPermissionsForEntity(eInfo, type) {
                                            var entity = getEntity(eInfo.name, type);
                                            try {
                                                if (!entity.IsEnabled()) {
                                                    affectedList.AddRow({ name: type + "." + eInfo.name, description: "isEnabled: false" });
                                                    return;
                                                }
                                            } catch (ex) { }
                                            var permissions = entity.GetVisibilityPermissionsAsJSON();
                                            var allowed = checkPermissions(permissions);
                                            if (!simulate) {
                                                try {
                                                    // no return
                                                    entity.AddVisibilityPermission(paramsForVisibility);
                                                    affectedList.AddRow({ name: type + "." + eInfo.name, description: eInfo.description });
                                                } catch (ex) {
                                                    logger.error("AddVisibilityToSystemObjects [" + eInfo.name + "] " + ex);
                                                    affectedList.AddRow({ name: type + "." + eInfo.name, description: "" + ex });
                                                }
                                            } else {
                                                affectedList.AddRow({ name: type + "." + eInfo.name, description: "isPermitted: " + allowed });
                                            }
                                            return entity;
                                        } //> applyPermissionsForEntity(...)
                                        //>----------------------------------------------------------------------------
                                        
                                        for (var x = 0; x < entityTypes.length; x++) {
                                            var type = entityTypes[x];
                                            var params = {
                                                maxItems: 999999999 /* NUMBER */,
                                                nameMask: undefined /* STRING */,
                                                type: type /* STRING */,
                                                tags: undefined /* TAGS */
                                            };
                                            // result: INFOTABLE dataShape: RootEntityList
                                            var entities = Resources["EntityServices"].GetEntityList(params);
                                            for (var y = 0; y < entities.rows.length; y++) {
                                                var eInfo = entities.rows[y];
                                                if (eInfo.isSystemObject || type == 'Subsystem') {
                                                    applyPermissionsForEntity(eInfo, type);
                                                } //? proper type
                                            } //# for each entity
                                        } //# for each entity type
                                        
                                        ['DataShape', 'Mashup', 'StyleDefinition', 'StateDefinition', 'MediaEntity'].forEach(entityType => {
                                            var pEntities = getEntityListForProject(entityType, 'BayerIoT');
                                            for (var x = 0; x < pEntities.rows.length; x++) {
                                                var pInfo = pEntities.rows[x];
                                                var entity = applyPermissionsForEntity(pInfo, entityType);
                                            } //# for each data shape entity
                                        });
                                        
                                        /////////////// ADVANCED TREE GRID ////////////////////
                                        //MediaEntities["GridRowIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowExpansionIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortDescendingArrow"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowCollapseIcon"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortAscendingArrow"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowExpansionIconNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortDescendingArrowNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridRowCollapseIconNav"].AddVisibilityPermission(paramsForVisibility);
                                        //MediaEntities["GridSortAscendingArrowNav"].AddVisibilityPermission(paramsForVisibility);
                                        
                                        if (!simulate) {
                                            Resources["TTPSC.Utilities.UtilityServices"].AddVisibilityPermission(paramsForVisibility);
                                            PersistenceProviders["ThingworxPersistenceProvider"].AddVisibilityPermission(paramsForVisibility);
                                            Resources["PDFExport"].AddVisibilityPermission(paramsForVisibility);
                                        }
                                        
                                        var result = affectedList;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
