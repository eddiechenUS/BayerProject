<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b140"
 majorVersion="8"
 minorVersion="2"
 modelPersistenceProviderPackage="H2PersistenceProviderPackage"
 revision="1"
 schemaVersion="1020"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="DataTableThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2018-12-05T02:54:20.679-08:00"
         name="BayerChangeoverTimeMatrix"
         projectName="BayerIoT"
         published="false"
         tags="Applications:Bayer"
         thingTemplate="DataTable"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTables>
                <ConfigurationTable
                 description="Data Thing Configuration"
                 isMultiRow="false"
                 name="DataThingSettings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description="Persistence Provider Name"
                             name="persistenceProvider"
                             ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <persistenceProvider>
                            <![CDATA[
                            ThingworxPersistenceProvider
                            ]]>
                            </persistenceProvider>
                        </Row>
                    </Rows>
                </ConfigurationTable>
                <ConfigurationTable
                 description="Index Settings"
                 isMultiRow="true"
                 name="Indexes"
                 ordinal="1">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.friendlyName="Index Field Names"
                             baseType="STRING"
                             description="Index fields"
                             name="fieldNames"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.friendlyName="Index Name"
                             baseType="STRING"
                             description="Index name"
                             name="name"
                             ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows></Rows>
                </ConfigurationTable>
                <ConfigurationTable
                 description="Data Shape Configuration"
                 isMultiRow="false"
                 name="Settings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.friendlyName="Data Shape"
                             baseType="DATASHAPENAME"
                             description="Data shape"
                             name="dataShape"
                             ordinal="0"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <accumulatedDataShape>
                                <json>
                                <![CDATA[
                                {"fieldDefinitions":{"sourceCode":{"name":"sourceCode","aspects":{"isPrimaryKey":true},"description":"","baseType":"STRING","ordinal":1},"productionLine":{"name":"productionLine","aspects":{"isPrimaryKey":true,"thingTemplate":"BayerProductionLine"},"description":"","baseType":"THINGNAME","ordinal":0},"targetCode":{"name":"targetCode","aspects":{"isPrimaryKey":true},"description":"","baseType":"STRING","ordinal":2},"time":{"name":"time","aspects":{"units":"minutes"},"description":"","baseType":"INTEGER","ordinal":3}}}
                                ]]>
                                </json>
                            </accumulatedDataShape>
                            <dataShape>
                            <![CDATA[
                            BayerChangeoverTimeMatrixDataShape
                            ]]>
                            </dataShape>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetChangeoverMatrix">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetChangeoverTime">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="sourceCode"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="targetCode"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetChangeoverMatrix">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = { dataShape: { fieldDefinitions : {} }, rows: [] };
                                        
                                        result.dataShape.fieldDefinitions[""] = { name: "", baseType: 'STRING', ordinal: 1 };
                                        
                                        var params = {
                                        	maxItems: 999999 /* NUMBER */
                                        };
                                        
                                        // result: INFOTABLE dataShape: "undefined"
                                        var allEntries = me.GetDataTableEntries(params);
                                        
                                        var getTime = function(sc, tc) {
                                            var query = {
                                              "filters": {
                                                "type": "AND",
                                                "filters": [
                                                  {
                                                    "fieldName": "sourceCode",
                                                    "type": "EQ",
                                                    "value": sc
                                                  },
                                                  {
                                                    "fieldName": "targetCode",
                                                    "type": "EQ",
                                                    "value": tc
                                                  }
                                                ]
                                              }
                                            };
                                            
                                            
                                            var params = {
                                                t: allEntries /* INFOTABLE */,
                                                query: query /* QUERY */
                                            };
                                        
                                            // result: INFOTABLE
                                            var entry = Resources["InfoTableFunctions"].Query(params);
                                            
                                            return entry.time;
                                        }
                                        
                                        var params = {
                                        	t: allEntries /* INFOTABLE */,
                                        	columns: "sourceCode" /* STRING */
                                        };
                                        
                                        // result: INFOTABLE
                                        var distinctSource = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        var sort = new Object();
                                        sort.name = "sourceCode";
                                        sort.ascending = true;
                                        distinctSource.Sort(sort);
                                        
                                        var params = {
                                        	t: allEntries /* INFOTABLE */,
                                        	columns: "targetCode" /* STRING */
                                        };
                                        
                                        // result: INFOTABLE
                                        var distinctTarget = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        var sort = new Object();
                                        sort.name = "targetCode";
                                        sort.ascending = true;
                                        distinctTarget.Sort(sort);
                                        
                                        var tableLength = distinctSource.rows.length;
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = distinctSource.rows[x];
                                        	
                                            result.dataShape.fieldDefinitions[row.sourceCode] = { name: row.sourceCode, baseType: 'NUMBER', ordinal: x+2 };
                                        }
                                        
                                        
                                        var tableLength = distinctTarget.rows.length;
                                        
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = distinctTarget.rows[x];
                                            
                                            var newEntry = new Object();
                                        	
                                            var tableLength2 = distinctSource.rows.length;
                                        
                                            for (var y = 0; y < tableLength2; y++) {
                                                var row2 = distinctSource.rows[y];
                                        
                                                newEntry[""] = row.targetCode;
                                                newEntry[row2.sourceCode] = getTime(row2.sourceCode, row.targetCode);
                                            }
                                            result.rows.push(newEntry);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetChangeoverTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = 60;
                                        
                                        var query = {
                                          "filters": {
                                            "type": "AND",
                                            "filters": [
                                              {
                                                "fieldName": "sourceCode",
                                                "type": "EQ",
                                                "value": sourceCode
                                              },
                                              {
                                                "fieldName": "targetCode",
                                                "type": "EQ",
                                                "value": targetCode
                                              }
                                            ]
                                          }
                                        };
                                        
                                        var params = {
                                        	maxItems: undefined /* NUMBER */,
                                        	values: undefined /* INFOTABLE*/,
                                        	query: query /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: "undefined"
                                        var entry = me.QueryDataTableEntries(params);
                                        
                                        if (entry.rows.length == 0) {
                                            logger.error("No changeover time in changeover matrix! Source code: " + sourceCode + " Target code: " + targetCode);
                                        }
                                        else {
                                        	result = entry.time;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
