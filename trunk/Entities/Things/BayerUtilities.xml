<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b140"
 majorVersion="8"
 minorVersion="2"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="1"
 schemaVersion="1020"
 universal="">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2018-05-24T10:33:20.745Z"
         name="BayerUtilities"
         projectName="BayerIoT"
         published="false"
         tags="Applications:Bayer"
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCurrentShiftStreamId">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetCurrentShiftTime">
                        <ResultType
                         aspect.dataShape="BayerShiftTimeDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDistinctProducts">
                        <ResultType
                         aspect.dataShape="BayerScheduleDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="BayerScheduleDataShape"
                             aspect.isRequired="true"
                             baseType="INFOTABLE"
                             description=""
                             name="shiftSchedule"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetRowNumOfCurrentShift">
                        <ResultType
                         aspect.dataShape="BayerProductionPlanDataShape"
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="StreamEntry"
                             aspect.isRequired="true"
                             baseType="INFOTABLE"
                             description=""
                             name="shiftSchedules"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCurrentShiftStreamId">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "BayerShiftTimeDataShape"
                                        var shiftTime = me.GetCurrentShiftTime();
                                        
                                        var params = {
                                        	oldestFirst: undefined /* BOOLEAN */,
                                        	maxItems: 1 /* NUMBER */,
                                        	sourceTags: undefined /* TAGS */,
                                        	endDate: dateAddHours(shiftTime.endTime, -1) /* DATETIME */,
                                        	query: undefined /* QUERY */,
                                        	source: undefined /* STRING */,
                                        	startDate: shiftTime.startTime /* DATETIME */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE
                                        var entry = Things["BayerShiftSchedules"].QueryStreamEntries(params);
                                        
                                        var result = entry && entry.rows.length > 0 ? entry.id : "";
                                        
                                        if (!result) {
                                            logger.error("[BayerUtilities.GetCurrentShiftStreamId] Shift not found");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetCurrentShiftTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "BayerShiftTimeDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(BayerShiftTimeDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // BayerShiftTimeDataShape entry object
                                        var newEntry = new Object();
                                        
                                        var startTime = new Date();
                                        var endTime = new Date();
                                        
                                        startTime.setMinutes(0);
                                        startTime.setSeconds(0);
                                        startTime.setMilliseconds(0);
                                        
                                        var hour = startTime.getHours();
                                        if (hour > 6 && hour < 14) {
                                            startTime.setHours(6);
                                        }
                                        else if (hour > 14 && hour < 22) {
                                            startTime.setHours(14);
                                        }
                                        else if (hour > 22 || hour < 6) {
                                            if (hour < 6) {
                                                startTime = dateAddDays(startTime, -1);
                                            }
                                            startTime.setHours(22);
                                        }
                                        
                                        newEntry.startTime = startTime; // DATETIME
                                        
                                        endTime.setMinutes(0);
                                        endTime.setSeconds(0);
                                        endTime.setMilliseconds(0);
                                        
                                        var hour = endTime.getHours();
                                        if (hour >= 6 && hour < 14) {
                                            endTime.setHours(14);
                                        }
                                        else if (hour >= 14 && hour < 22) {
                                            endTime.setHours(22);
                                        }
                                        else if (hour >= 22 || hour < 6) {
                                            if (hour >= 22) {
                                                endTime = dateAddDays(endTime, 1);
                                            }
                                            endTime.setHours(6);
                                        }
                                        
                                        newEntry.endTime = endTime; // DATETIME
                                        
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDistinctProducts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	t: shiftSchedule /* INFOTABLE */,
                                        	columns: "productId,productDescription" /* STRING */
                                        };
                                        
                                        // result: INFOTABLE
                                        var result = Resources["InfoTableFunctions"].Distinct(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetRowNumOfCurrentShift">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "BayerShiftTimeDataShape"
                                        var shiftTime = me.GetCurrentShiftTime();
                                        
                                        var tableLength = shiftSchedules.rows.length;
                                        
                                        var result = -1;
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = shiftSchedules.rows[x];
                                        	
                                            if (row.timestamp == shiftTime.startTime) {
                                                result = x;
                                                break;
                                            }
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
