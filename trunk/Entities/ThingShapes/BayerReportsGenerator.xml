<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2319"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1041"
 universal="">
    <ThingShapes>
        <ThingShape
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2019-12-04T09:46:39.173Z"
         name="BayerReportsGenerator"
         projectName="BayerIoT"
         tags="Applications:Bayer">
            <PropertyDefinitions>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="reportsRecipient"
                 ordinal="1"></PropertyDefinition>
                <PropertyDefinition
                 aspect.cacheTime="0.0"
                 aspect.dataChangeType="VALUE"
                 aspect.isLogged="false"
                 aspect.isPersistent="true"
                 aspect.isReadOnly="false"
                 baseType="STRING"
                 category=""
                 description=""
                 isLocalOnly="false"
                 name="reportsSender"
                 ordinal="2"></PropertyDefinition>
            </PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ExportShiftToCsv">
                    <ResultType
                     aspect.dataShape="FileSystemFileWithLinks"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INTEGER"
                         description="id of shift that their schedule will be exported "
                         name="id"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GenerateAndSendReport">
                    <ResultType
                     aspect.dataShape="FileSystemFileWithLinks"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GenerateDailyReport">
                    <ResultType
                     aspect.dataShape="FileSystemFileWithLinks"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SendReportByMail">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="FileSystemFileWithLinks"
                         aspect.isRequired="true"
                         baseType="INFOTABLE"
                         description=""
                         name="file"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="from"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="to"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ExportShiftToCsv">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var shifts =  Things[me.name].GetShiftsFromNow({
                                    	nrOfPrevShifts: 7 ,
                                    	interval: 6 ,
                                    	nrOfNextShifts: 3
                                    });
                                    var query = 
                                    {
                                        "filters": {
                                            "type": "EQ",
                                            "fieldName": "id",
                                            "value": id
                                        }
                                    };
                                    
                                    var shift = Resources["InfoTableFunctions"].Query({
                                    	t: shifts,
                                    	query: query
                                    });
                                    var schedule = shift.rows[0].shiftSchedule;
                                    
                                    var separator = ';';
                                    
                                    var fields = {
                                        time: "timestamp",
                                        productId: "product ID (scheduled)",
                                        productDescription: "product (scheduled)",
                                        targetQuantity: "target",
                                        quantityProduced: "actual",
                                        targetQuantityBlisters :"target blisters",
                                    	quantityProducedBlisters: "actual blisters"
                                    };
                                    
                                    var header = '';
                                    for (var field in fields) {
                                        header += fields[field] + separator;
                                    }
                                    
                                    var content = '';
                                    
                                    var tableLength = schedule.rows.length;
                                    for (var x=0; x < tableLength; x++) {
                                        var row = schedule.rows[x];
                                        
                                        for (var field in fields) {
                                            if(row[field]&& row[field] !== "undefined" || row[field] === 0){
                                            	content += row[field] + separator;
                                            }
                                            else{
                                            	content += "" + separator;
                                            }
                                        }
                                        content += '\n';
                                    }
                                    
                                    var body = header + '\n' + content;
                                    
                                    var fileName = Resources["CurrentSessionInfo"].GetCurrentUser() + "_" + dateFormat(new Date(), "yyyyMMdd_HHmm") + ".csv";
                                    
                                    Things["BayerReportsRepository"].CreateTextFile({
                                    	path: "/" + fileName /* STRING */,
                                    	data: body /* STRING */,
                                    	overwrite: true /* BOOLEAN */
                                    });
                                    
                                    // result: INFOTABLE dataShape: "FileSystemFileWithLinks"
                                    var result =  Things["BayerReportsRepository"].GetFileListingWithLinks({
                                    	path: "/" /* STRING */,
                                    	nameMask: fileName /* STRING */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GenerateAndSendReport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INFOTABLE dataShape: "FileSystemFileWithLinks"
                                    var report = me.GenerateDailyReport();
                                    
                                    var params = {
                                    	file: report /* INFOTABLE */,
                                    	from: me.reportsSender /* STRING */,
                                    	to: me.reportsRecipient /* STRING */
                                    };
                                    
                                    try {
                                    	me.SendReportByMail(params);
                                    }
                                    catch (ex) {
                                        logger.error(ex);
                                    }
                                    
                                    var result = report;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GenerateDailyReport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var fileName = dateFormat(new Date(), "yyyyMMddHHmmssSSS") + ".pdf";
                                    
                                    var params = {
                                    	FileRepository: "BayerReportsRepository" /* THINGNAME */,
                                    	Rotated90Deg: true /* BOOLEAN */,
                                    	AppKey: "3f6cb48c-3087-4998-a3be-d79d4132cac2" /* STRING */,
                                    	ServerAddress: "https://localhost:8443/Thingworx/Runtime/index-jq3.html#mashup=BayerReportsPrintPageMashup&lineName=" + me.name /* STRING */,
                                    	OutputFileName: fileName /* STRING */,
                                        Resolution: "1754*1240" /* STRING */
                                    	//Resolution: "1754*1240" /* STRING */
                                    };
                                    
                                    // result: STRING
                                    var pdfResult = Resources["PDFExport"].CreatePDF(params);
                                    logger.debug("PDFExport " + pdfResult);
                                    
                                    
                                    var params = {
                                    	path: "/" /* STRING */,
                                    	nameMask: fileName /* STRING */
                                    };
                                    
                                    // result: INFOTABLE dataShape: FileSystemFileWithLinks
                                    var result = Things["BayerReportsRepository"].GetFileListingWithLinks(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SendReportByMail">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                    	cc: undefined /* STRING */,
                                    	path: file.path /* STRING */,
                                    	bcc: undefined /* STRING */,
                                    	subject: "Daily report for " + me.name /* STRING */,
                                    	fileRepository: "BayerReportsRepository" /* THINGNAME */,
                                    	from: from /* STRING */,
                                    	attachmentName: file.name /* STRING */,
                                    	to: to /* STRING */,
                                    	mimeType: "application/pdf" /* STRING */,
                                    	body: "" /* HTML */
                                    };
                                    
                                    // no return
                                    Things["BayerMailServer2"].SendMessageWithAttachment(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions>
                <Subscription
                 description=""
                 enabled="true"
                 eventName="ScheduledEvent"
                 name="OnReportScheduled"
                 source="BayerReportsScheduler"
                 sourceProperty=""
                 sourceType="Thing">
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OnReportScheduled">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.GenerateAndSendReport();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </Subscription>
            </Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="Bayer:PerformanceDashboard"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="reportsRecipient"></AlertDefinitions>
                <AlertDefinitions
                 name="reportsSender"></AlertDefinitions>
            </AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="ExportShiftToCsv">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="SendReportByMail">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke></ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GenerateDailyReport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GenerateAndSendReport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
