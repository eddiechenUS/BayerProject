<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2319"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="4"
 schemaVersion="1041"
 universal="">
    <ThingShapes>
        <ThingShape
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2019-12-19T14:39:06.694Z"
         name="BayerExportsManagment"
         projectName="BayerIoT"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ExportToCSV">
                    <ResultType
                     aspect.dataShape="FileSystemFileWithLinks"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="data"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="type"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetActionsDataForExport">
                    <ResultType
                     aspect.dataShape="BayerActionListDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetChangoverDataForExport">
                    <ResultType
                     aspect.dataShape="BayerChangeoverTrendDetailsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDelaysDataForExport">
                    <ResultType
                     aspect.dataShape="GetDelayShiftDetailsDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endTime"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startTime"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMaintenanceDataForExport">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.thingTemplate="BayerProductionLine"
                         baseType="THINGNAME"
                         description=""
                         name="productionLine"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMaintenanceTicketsForExport">
                    <ResultType
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetPerformanceDataForExport">
                    <ResultType
                     aspect.dataShape="BayerScheduleDataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ExportToCSV">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var separator = ';';
                                    var header = '';
                                    var fields = '';
                                    switch (type) {
                                    	case "performance":
                                    		fields = {
                                    			"time": "timestamp",
                                    			"productId": "product ID (scheduled)",
                                    			"productDescription": "product (scheduled)",
                                    			"targetQuantity": "target",
                                    			"quantityProduced": "actual",
                                    			"targetQuantityBlisters": "target blisters",
                                    			"quantityProducedBlisters": "actual blisters"
                                    		};
                                    		break;
                                    	case "delays":
                                    		fields = {
                                    			"category": "category",
                                    			"startTime": "startTime",
                                    			"endTime": "endTime",
                                    			"duration": "duration",
                                    			"reasonCode": "reasonCode"
                                    		};
                                    		break;
                                    	case "changeover":
                                    		fields = {
                                    			"start": "startDate",
                                    			"end": "endDate",
                                    			"target": "target",
                                    			"actual": "actual",
                                    			"delta": "delta",
                                    			"fromOrderNr": "fromOrderNr",
                                    			"toOrderNr": "toOrderNr"
                                    
                                    		};
                                    		break;
                                    	case "actions":
                                    		fields = {
                                    			"createdTime": "createdDate",
                                    			"status": "status",
                                    			"problemDescription": "problemDescription",
                                    			"solutionDescription": "solutionDescription",
                                    			"dueDate": "dueDate",
                                    			"assignedTo": "assignedTo"
                                    		};
                                    		break;
                                    	case "maintenance":
                                    		fields = {
                                    			"timestamp": "timestamp",
                                    			"status": "status",
                                    			"type": "type",
                                    			"assignedTo": "assignedTo"
                                    		};
                                    		break;
                                    }
                                    
                                    
                                    for (var field in fields) {
                                    	header += fields[field] + separator;
                                    }
                                    
                                    var content = '';
                                    var tableLength = data.rows.length;
                                    for (var x = 0; x < tableLength; x++) {
                                    	var row = data.rows[x];
                                    	for (var field in fields) {
                                    		if (row[field] && row[field] !== "undefined" || row[field] === 0) {
                                    			content += row[field] + separator;
                                    		} else {
                                    			content += "" + separator;
                                    		}
                                    	}
                                    	content += '\n';
                                    }
                                    
                                    
                                    var body = header + '\n' + content;
                                    
                                    var fileName = Resources["CurrentSessionInfo"].GetCurrentUser() + "_" + dateFormat(new Date(), "yyyyMMdd_HHmm") + ".csv";
                                    
                                    Things["BayerReportsRepository"].CreateTextFile({
                                    	path: "/" + fileName /* STRING */ ,
                                    	data: body /* STRING */ ,
                                    	overwrite: true /* BOOLEAN */
                                    });
                                    
                                    // result: INFOTABLE dataShape: "FileSystemFileWithLinks"
                                    var result = Things["BayerReportsRepository"].GetFileListingWithLinks({
                                    	path: "/" /* STRING */ ,
                                    	nameMask: fileName /* STRING */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetActionsDataForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result =  me.QueryActions({
                                    	createdTimeFrom: startDate,
                                    	createdTimeTo: endDate,
                                        status : " ",
                                        assignedTo: " ",
                                        dueDate: undefined
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetChangoverDataForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result =  Things["BayerDBDataProvider"].GetChangeOverTrendByDate({
                                    	endDate: endDate,
                                    	line: me.name,
                                    	startDate: startDate
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDelaysDataForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var shifts = Things["BayerDBDataProvider"].GetShiftsByTime({
                                    	productionLine: me.name,
                                    	startTime: startTime,
                                    	endTime: endTime
                                    });
                                    
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	dataShapeName: "GetDelayShiftDetailsDataShape"
                                    });
                                    
                                    
                                    var shiftTableLength = shifts.rows.length;
                                    for (var x = 0; x < shiftTableLength; x++) {
                                    	var row = shifts.rows[x];
                                    	var delays = me.GetDelayShiftDetails({
                                    		shiftScheduleId: row.id
                                    	});
                                    	if (delays.rows.length > 0) {
                                    		var delayTableLength = delays.rows.length;
                                    		for (var i = 0; i < delayTableLength; i++) {
                                    			result.AddRow(delays.rows[i]);
                                    		}
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMaintenanceDataForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result =  Things[productionLine].GetMaintenanceTicketsByDate({
                                    	endDate: endDate /* DATETIME */,
                                    	startDate: startDate /* DATETIME */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMaintenanceTicketsForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Things["BayerDBDataProvider"].GetMaintenanceTicketsByDate({
                                    	endDate: startDate /* DATETIME */,
                                    	productionLine: me.name /* THINGNAME */,
                                    	startDate: startDate /* DATETIME */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetPerformanceDataForExport">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var schedulesTable =  Things["BayerDBDataProvider"].GetShiftSchedules({
                                    	productionLine: me.name,
                                    	startTime: startDate,
                                    	endTime: endDate
                                    });
                                    
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        dataShapeName : "BayerScheduleDataShape"
                                    });
                                    var tableLength = schedulesTable.rows.length;
                                    for (var x=0; x < tableLength; x++) {
                                        var schedule = schedulesTable.rows[x].shiftSchedule;
                                        var newRow = new Object();
                                        newRow.time = schedule.rows[0].time;
                                        newRow.productId = schedule.rows[0].productId;
                                        newRow.productDescription=schedule.rows[0].productDescription;
                                        newRow.targetQuantity = schedule.rows[0].targetQuantity;
                                        newRow.quantityProduced = schedule.rows[0].quantityProduced;
                                        newRow.targetQuantityBlisters = schedule.rows[0].targetQuantityBlisters;
                                        newRow.quantityProducedBlisters = schedule.rows[0].quantityProducedBlisters;
                                        
                                        result.AddRow(newRow);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="GetActionsDataForExport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetChangoverDataForExport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetDelaysDataForExport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ExportToCSV">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetMaintenanceTicketsForExport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetPerformanceDataForExport">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerOffice"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="Role.BayerProductionLine.Any"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
